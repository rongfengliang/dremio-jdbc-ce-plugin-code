{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "title": "ARP Schema Definition",
  "description": "ARP schema definition that validates custom ARP specifications for pushdown capabilities of a relational database.",
  "definitions": {
    "dremio_param_types": {
      "description": "Dremio supported parameter types.",
      "anyOf": [
        {
          "$ref": "#/definitions/dremio_types"
        },
        {
          "type": "string",
          "enum": [
            "flag_star",
            "flag_symbol"
          ]
        }
      ]
    },
    "dremio_types": {
      "description": "The name of the type in Dremio. Must correspond to a valid Dremio type from Calcite's SqlTypeName enum.",
      "type": "string",
      "enum": [
        "bigint",
        "boolean",
        "date",
        "decimal",
        "double",
        "float",
        "integer",
        "interval_day_second",
        "interval_year_month",
        "time",
        "timestamp",
        "varbinary",
        "varchar"
      ]
    },
    "join_definition": {
      "description": "Description of a join operation.",
      "type": "object",
      "required": [
        "enable"
      ],
      "properties": {
        "enable": {
          "type": "boolean"
        },
        "inequality": {
          "description": "Indicates the data source supports non-equijoins for the condition.",
          "type": "boolean"
        },
        "rewrite": {
          "description": "The syntax to rewrite the join for this dialect. {0} is the left table, {1} is the right table, and {2} is the condition.",
          "type": "string"
        }
      }
    },
    "non_empty_string": {
      "description": "Regex definition to enforce that at least one valid character exists. Ignores leading and trailing spaces as implementation ought to trim.",
      "type": "string",
      "pattern": "^.*\\S.*$"
    },
    "variable_rewrite": {
      "description": "Rewrite definition for a var-args function",
      "type": "object",
      "required": [
        "separator_sequence",
        "rewrite_format"
      ],
      "properties": {
        "separator_sequence": {
          "description": "The string sequence to separate each operand.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rewrite_argument": {
          "description": "Description of how to rewrite each argument in the source DBMS. The argument is referenced as {0}. If this is omitted, we include the argument without additional syntax.",
          "type": "string"
        },
        "rewrite_format": {
          "description": "The templatized string to rewrite the function with. Argument {separator[0]} is the full series of operands, joined on separator_sequence at index 0, while {separator[1]} is the full series of operands, joined on separator_sequence at index 1, and so on..",
          "type": "string"
        }
      }
    },
    "operator_definition": {
      "description": "Description of an operator including its aliases, arguments, and return type.",
      "type": "object",
      "properties": {
        "names": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/operator_list"
          }
        },
        "signatures": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "args",
              "return"
            ],
            "properties": {
              "args": {
                "description": "ordered list of input arguments.",
                "type": "array",
                "items": {
                  "$ref": "#/definitions/dremio_param_types"
                }
              },
              "return": {
                "allOf": [
                  {
                    "$ref": "#/definitions/dremio_types"
                  },
                  {
                    "description": "The return type of the operator."
                  }
                ]
              },
              "rewrite": {
                "description": "Description of how to rewrite the operator in the source DBMS. Parameters are referenced using $<parameter_0-based_param_number. If this is omitted, we unparse using Calcite's behavior.",
                "type": "string"
              }
            }
          }
        }
      }
    },
    "operator_list": {
      "description": "Supported operators.",
      "type": "string",
      "enum": [
        "!=",
        "%",
        "*",
        "+",
        "-",
        "/",
        "<",
        "<=",
        "<>",
        "=",
        "==",
        ">",
        ">=",
        "||",
        "abs",
        "acos",
        "and",
        "asin",
        "atan",
        "atan2",
        "avg",
        "avg_distinct",
        "between",
        "case",
        "cast",
        "cbrt",
        "ceil",
        "ceiling",
        "char_length",
        "character_length",
        "coalesce",
        "concat",
        "convert",
        "cos",
        "cosh",
        "cot",
        "covar_pop",
        "covar_samp",
        "covar_pop_distinct",
        "covar_samp_distinct",
        "cume_dist",
        "current_catalog",
        "current_date",
        "current_path",
        "current_role",
        "current_schema",
        "current_time",
        "current_timestamp",
        "current_user",
        "date_trunc_century",
        "date_trunc_day",
        "date_trunc_decade",
        "date_trunc_hour",
        "date_trunc_millennium",
        "date_trunc_minute",
        "date_trunc_month",
        "date_trunc_quarter",
        "date_trunc_second",
        "date_trunc_week",
        "date_trunc_year",
        "dayofmonth",
        "dayofweek",
        "dayofyear",
        "degrees",
        "dense_rank",
        "desc",
        "exp",
        "extract_century",
        "extract_day",
        "extract_decade",
        "extract_dow",
        "extract_doy",
        "extract_epoch",
        "extract_hour",
        "extract_millennium",
        "extract_minute",
        "extract_month",
        "extract_quarter",
        "extract_second",
        "extract_week",
        "extract_year",
        "first_value",
        "floor",
        "hour",
        "is not distinct from",
        "is distinct from",
        "is not null",
        "is null",
        "lag",
        "last_value",
        "lead",
        "like",
        "ln",
        "localtime",
        "localtimestamp",
        "locate",
        "log10",
        "lower",
        "lpad",
        "ltrim",
        "max",
        "max_distinct",
        "min",
        "min_distinct",
        "minute",
        "mod",
        "month",
        "not between",
        "not like",
        "not",
        "ntile",
        "nulls first",
        "nulls last",
        "or",
        "over",
        "percent_rank",
        "pi",
        "position",
        "power",
        "quarter",
        "radians",
        "rand",
        "rank",
        "replace",
        "reverse",
        "round",
        "row_number",
        "rpad",
        "rtrim",
        "second",
        "session_user",
        "sign",
        "sin",
        "sinh",
        "sqrt",
        "stddev",
        "stddev_pop",
        "stddev_samp",
        "stddev_distinct",
        "stddev_pop_distinct",
        "stddev_samp_distinct",
        "substr",
        "substring",
        "sum",
        "sum_distinct",
        "system_user",
        "tan",
        "tanh",
        "timestampadd_day",
        "timestampadd_hour",
        "timestampadd_minute",
        "timestampadd_month",
        "timestampadd_quarter",
        "timestampadd_second",
        "timestampadd_week",
        "timestampadd_year",
        "timestampdiff_day",
        "timestampdiff_hour",
        "timestampdiff_minute",
        "timestampdiff_month",
        "timestampdiff_quarter",
        "timestampdiff_second",
        "timestampdiff_week",
        "timestampdiff_year",
        "trim",
        "truncate",
        "upper",
        "user",
        "var_pop",
        "var_pop_distinct",
        "var_samp",
        "var_samp_distinct",
        "variance",
        "variance_distinct",
        "week",
        "year"
      ]
    },
    "order_by":{
      "description":"Describes properties of ORDER BY clauses.",
      "type":"object",
      "required":[
        "enable",
        "default_nulls_ordering",
        "enable_without_field_in_select",
        "requires_limit"
      ],
      "properties":{
        "enable":{
          "type":"boolean"
        },
        "default_nulls_ordering":{
          "description":"Describes the order NULLS appear in when order is ascending.",
          "type":"string",
          "enum":[
            "first",
            "last"
          ]
        },
        "enable_without_field_in_select":{
          "description":"Indicates if columns that are not in the select-list can appear in the ORDER BY clause.",
          "type":"boolean"
        },
        "requires_limit":{
          "description":"Indicates that limit is required to do ordering.",
          "type":"boolean"
        }
      }
    },
    "sort_specification": {
      "description": "Defines how and if ORDER BY, LIMIT/TOP/FETCH/OFFSET clauses are pushed down to the source dialect.",
      "required": [
        "enable",
        "fetch_offset",
        "order_by"
      ],
      "properties": {
        "enable": {
          "type": "boolean"
        },
        "fetch_offset": {
          "description": "Indicates if fetch and offset clauses are supported.",
          "type": "object",
          "required": [
            "offset_fetch",
            "fetch_only",
            "offset_only"
          ],
          "properties": {
            "offset_fetch": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "description": "The format for a combined offset fetch clause. Use {0} to indicate the number of rows fetched and {1} to indicate the offset row. Default format is OFFSET {0} FETCH {1}.",
                  "default": "OFFSET {0} ROWS FETCH NEXT {1} ROWS ONLY",
                  "type": "string"
                }
              }
            },
            "fetch_only": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "description": "The format for an offset fetch clause containing only the FETCH clause. Use {0} to indicate the number of rows fetched. Default format is FETCH {0}",
                  "default": "FETCH NEXT {0} ROWS ONLY",
                  "type": "string"
                }
              }
            },
            "offset_only": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "description": "The format for a combined offset fetch clause containing only the OFFSET clause. Use {0} to indicate the offset row. Default format is OFFSET {0}.",
                  "default": "OFFSET {0} ROWS",
                  "type": "string"
                }
              }
            }
          }
        },
        "order_by": {
          "description": "Describes properties of ORDER BY clauses.",
          "required": [
            "enable",
            "default_nulls_ordering"
          ],
          "properties": {
            "enable": {
              "type": "boolean"
            },
            "default_nulls_ordering": {
              "description": "Describes the order NULLS appear in. first means nulls are always first regardless of direction. high means nulls are first when descending only. last means nulls are always at the end. low means nulls are last when descending.",
              "type": "string",
              "enum": [
                "first",
                "high",
                "last",
                "low"
              ]
            }
          }
        }
      }
    }
  },
  "type": "object",
  "required": [
    "metadata",
    "syntax",
    "data_types",
    "relational_algebra",
    "expressions"
  ],
  "properties": {
    "metadata": {
      "description": "Metadata about the ARP file itself.",
      "type": "object",
      "required": [
        "name",
        "apiname",
        "spec_version"
      ],
      "properties": {
        "name": {
          "description": "The name shown in the UI when adding this type of source connector.",
          "$ref": "#/definitions/non_empty_string"
        },
        "apiname": {
          "description": "Name used when creating a source of this type. Must be unique.",
          "$ref": "#/definitions/non_empty_string"
        },
        "spec_version": {
          "description": "The version of the ARP spec this file implements.",
          "$ref": "#/definitions/non_empty_string"
        }
      }
    },
    "syntax": {
      "description": "Generic syntactic properties about the SQL dialect.",
      "type": "object",
      "required": [
        "identifier_quote",
        "allows_boolean_literal"
      ],
      "properties": {
        "identifier_quote": {
          "description": "The identifier quote character. If this is a '[' character, then identifier sequences will be closed with ']'.",
          "type": "string",
          "pattern": "^\\s*\\S{1}\\s*$"
        },
        "allows_boolean_literal": {
          "type": "boolean"
        },
        "supports_catalogs": {
          "description": "Allows manual override of automatic detection of catalog support in the data source. If omitted, then Dremio will attempt to auto-detect support.",
          "type": "boolean"
        },
        "supports_schemas": {
          "description": "Allows manual override of automatic detection of schema support in the data source. If omitted, then Dremio will attempt to auto-detect support.",
          "type": "boolean"
        },
        "map_boolean_literal_to_bit": {
          "description": "Indicates if true/false literals should be mapped to 1/0.",
          "type": "boolean"
        },
        "identifier_length_limit": {
          "type": "integer",
          "minimum": 1
        },
        "inject_numeric_cast_project": {
          "description": "Specifies that an explicit cast should be added for all decimal columns within a projection, to allow specification of precision/scale when it might be missing. If omitted, then Dremio will not inject the cast.",
          "type": "boolean"
        },
        "inject_approx_numeric_cast_project": {
          "description": "Specifies that an explicit cast should be added for all approximate numeric columns within a projection. If omitted, then Dremio will not inject the cast.",
          "type": "boolean"
        }
      }
    },
    "data_types": {
      "description": "List the supported data types for the dialect and how types map to Dremio types. If a type is not listed, columns and literals of this type are not exposed.",
      "type": "object",
      "required": [
        "mappings"
      ],
      "properties": {
        "mappings": {
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "source",
              "dremio"
            ],
            "properties": {
              "source": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "description": "Data source name.",
                    "$ref": "#/definitions/non_empty_string"
                  },
                  "max_scale": {
                    "description": "The maximum scale.",
                    "type": "integer",
                    "minimum": 1
                  },
                  "max_precision": {
                    "description": "The maximum scale.",
                    "type": "integer",
                    "minimum": 1
                  },
                  "literal_length_limit": {
                    "description": "The longest length (in-characters) this literal can be while still being pushed to the source.",
                    "type": "integer"
                  }
                }
              },
              "dremio": {
                "description": "The type the given source should be exposed as in Dremio.",
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "$ref": "#/definitions/dremio_types"
                  }
                }
              },
              "default_cast_spec": {
                "description": "Indicates that the given source type should be used when implementing CAST for the given Dremio type.",
                "type": "boolean"
              },
              "required_cast_args": {
                "description": "Arguments required when CASTing to the source type. Can be none (default), precision, scale, or precision_scale.",
                "type": "string",
                "default": "none",
                "enum": [
                  "none",
                  "precision",
                  "scale",
                  "precision_scale"
                ]
              }
            }
          }
        }
      }
    },
    "relational_algebra": {
      "description": "Describes the supported relational-algebra level operations. These are operations on a set (ie RelNodes.)",
      "type": "object",
      "required": [
        "aggregation",
        "except",
        "project",
        "join",
        "sort",
        "union",
        "union_all",
        "values"
      ],
      "properties": {
        "allow_set_operators_with_sort": {
          "description": "Indicates if set operations like union can be applied to sort operators.",
          "type": "boolean"
        },
        "aggregation": {
          "description": "Describes support for aggregate functions, GROUP BY, and DISTINCT.",
          "type": "object",
          "required": [
            "enable",
            "count_functions",
            "distinct",
            "group_by_ordinal",
            "functions"
          ],
          "properties": {
            "enable": {
              "type": "boolean"
            },
            "count_functions": {
              "description": "Supported count operations. These all must return BIGINT when pushed down.",
              "type": "object",
              "properties": {
                "count_star": {
                  "description": "Count of all rows using *.",
                  "type": "object",
                  "properties": {
                    "enable": {
                      "type": "boolean"
                    },
                    "variable_rewrite": {
                      "$ref": "#/definitions/variable_rewrite"
                    }
                  }
                },
                "count": {
                  "description": "Count of all rows with non-null values for the given column.",
                  "type": "object",
                  "properties": {
                    "enable": {
                      "type": "boolean"
                    },
                    "variable_rewrite": {
                      "$ref": "#/definitions/variable_rewrite"
                    }
                  }
                },
                "count_multi": {
                  "description": "Count of all rows with non-null values for the given list of columns.",
                  "type": "object",
                  "properties": {
                    "enable": {
                      "type": "boolean"
                    },
                    "variable_rewrite": {
                      "$ref": "#/definitions/variable_rewrite"
                    }
                  }
                },
                "count_distinct": {
                  "description": "Count of all unique rows with non-null values for the given column.",
                  "type": "object",
                  "properties": {
                    "enable": {
                      "type": "boolean"
                    },
                    "variable_rewrite": {
                      "$ref": "#/definitions/variable_rewrite"
                    }
                  }
                },
                "count_distinct_multi": {
                  "description": "Count of all unique rows with non-null values for the given list of columns.",
                  "type": "object",
                  "properties": {
                    "enable": {
                      "type": "boolean"
                    },
                    "variable_rewrite": {
                      "$ref": "#/definitions/variable_rewrite"
                    }
                  }
                }
              }
            },
            "distinct": {
              "description": "Indicates if DISTINCT can be used in the SELECT list and in aggregate functions.",
              "type": "boolean"
            },
            "functions": {
              "description": "List of aggregate functions supported by the source",
              "type": "array",
              "items": {
                "$ref": "#/definitions/operator_definition"
              }
            }
          }
        },
        "except": {
          "type": "object",
          "required": [
            "enable"
          ],
          "properties": {
            "enable": {
              "type": "boolean"
            }
          }
        },
        "project": {
          "type": "object",
          "required": [
            "enable"
          ],
          "properties": {
            "enable": {
              "type": "boolean"
            }
          }
        },
        "join": {
          "type": "object",
          "required": [
            "enable",
            "cross",
            "inner",
            "left",
            "right",
            "full"
          ],
          "properties": {
            "enable": {
              "type": "boolean"
            },
            "cross": {
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "rewrite": {
                  "description": "The rewrite clause for a cross join. Param 0 is the left table and Param 1 is the right table.",
                  "type": "string"
                }
              }
            },
            "inner": {
              "$ref": "#/definitions/join_definition"
            },
            "left": {
              "$ref": "#/definitions/join_definition"
            },
            "right": {
              "$ref": "#/definitions/join_definition"
            },
            "full": {
              "$ref": "#/definitions/join_definition"
            }
          }
        },
        "sort": {
          "$ref": "#/definitions/sort_specification"
        },
        "union": {
          "type": "object",
          "required": [
            "enable"
          ],
          "properties": {
            "enable": {
              "type": "boolean"
            }
          }
        },
        "union_all": {
          "type": "object",
          "required": [
            "enable"
          ],
          "properties": {
            "enable": {
              "type": "boolean"
            }
          }
        },
        "values": {
          "type": "object",
          "required": [
            "enable",
            "method"
          ],
          "properties": {
            "enable": {
              "type": "boolean"
            },
            "method": {
              "description": "Describes how the dummy table should be constructed. values indicates a VALUES clause should be generated. dummy_table indicates a dummy table should be used.",
              "enum": [
                "dummy_table",
                "values"
              ],
              "type": "string"
            },
            "dummy_table": {
              "description": "The name of the dummy table used for projecting default values.",
              "type": "string"
            }
          }
        }
      }
    },
    "expressions": {
      "description": "Describes support for pushing down scalar expressions (RexNodes).",
      "type": "object",
      "required": [
        "datetime_formats",
        "subqueries",
        "supports_case",
        "supports_over",
        "operators",
        "window_functions"
      ],
      "properties": {
        "subqueries": {
          "description": "Describes support for sub-query pushdown.",
          "type": "object",
          "required": [
            "enable",
            "correlated",
            "scalar",
            "in_clause",
            "exists_clause"
          ],
          "properties": {
            "enable": {
              "type": "boolean"
            },
            "correlated": {
              "type": "boolean"
            },
            "scalar": {
              "type": "boolean"
            },
            "in_clause": {
              "type": "boolean"
            },
            "exists_clause": {
              "type": "boolean"
            }
          }
        },
        "supports_case": {
          "type": "boolean"
        },
        "supports_over": {
          "type": "boolean"
        },
        "datetime_formats": {
          "description": "Describes the datetime format string mappings, for functions such as TO_DATE.",
          "type": "object",
          "required": [
            "century",
            "day_name_abbreviated",
            "day_name",
            "day_of_month",
            "day_of_week",
            "day_of_year",
            "era",
            "hour_12",
            "hour_24",
            "meridian",
            "millisecond",
            "minute",
            "month_name_abbreviated",
            "month_name",
            "month",
            "second",
            "timezone_abbreviation",
            "timezone_offset",
            "week_of_year",
            "year_2",
            "year_4"
          ],
          "properties": {
            "century": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "type": "string"
                }
              }
            },
            "day_name_abbreviated": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "type": "string"
                }
              }
            },
            "day_name": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "type": "string"
                }
              }
            },
            "day_of_month": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "type": "string"
                }
              }
            },
            "day_of_week": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "type": "string"
                }
              }
            },
            "day_of_year": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "type": "string"
                }
              }
            },
            "era": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "type": "string"
                }
              }
            },
            "hour_12": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "type": "string"
                }
              }
            },
            "hour_24": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "type": "string"
                }
              }
            },
            "meridian": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "type": "string"
                }
              }
            },
            "millisecond": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "type": "string"
                }
              }
            },
            "minute": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "type": "string"
                }
              }
            },
            "month_name_abbreviated": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "type": "string"
                }
              }
            },
            "month_name": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "type": "string"
                }
              }
            },
            "month": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "type": "string"
                }
              }
            },
            "second": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "type": "string"
                }
              }
            },
            "timezone_abbreviation": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "type": "string"
                }
              }
            },
            "timezone_offset": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "type": "string"
                }
              }
            },
            "week_of_year": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "type": "string"
                }
              }
            },
            "year_2": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "type": "string"
                }
              }
            },
            "year_4": {
              "required": [
                "enable"
              ],
              "properties": {
                "enable": {
                  "type": "boolean"
                },
                "format": {
                  "type": "string"
                }
              }
            }
          }
        },
        "operators": {
          "description": "List of scalar operators and functions supported by the source",
          "type": "array",
          "items": {
            "$ref": "#/definitions/operator_definition"
          }
        },
        "variable_length_operators": {
          "description": "List of scalar operators that take in variable number of parameters.",
          "type": "array",
          "items": {
            "type": "object",
            "required": [
              "names"
            ],
            "properties": {
              "names": {
                "type": "array",
                "items": {
                  "description": "Name and aliases for the operation",
                  "type": "string"
                }
              },
              "variable_signatures": {
                "type": "array",
                "properties": {
                  "arg_type": {
                    "allOf": [
                      {
                        "description": "The type of argument supported. If this field is omitted, any type is supported and types do not need to match."
                      },
                      {
                        "$ref": "#/definitions/dremio_types"
                      }
                    ]
                  },
                  "return": {
                    "allOf": [
                      {
                        "description": "The type returned."
                      },
                      {
                        "$ref": "#/definitions/dremio_types"
                      }
                    ]
                  },
                  "variable_rewrite": {
                    "$ref": "#/definitions/variable_rewrite"
                  }
                }
              }
            }
          }
        },
        "window_functions":{
          "description":"The list of supported window functions.",
          "type":"array",
          "items":{
            "allOf":[
              {
                "$ref":"#/definitions/operator_definition"
              },
              {
                "type":"object",
                "required":[
                  "order_by",
                  "frame"
                ],
                "properties": {
                  "order_by": {
                    "description": "Indicates how the operation interacts with an OVER clause with an ORDER BY. Can be allowed (order by is optional), required (order by is mandatory for pushdown), and disallowed (order by is not permitted).",
                    "type": "string",
                    "enum": [
                      "allowed",
                      "required",
                      "disallowed"
                    ]
                  },
                  "frame":{
                    "description":"Indicates how the operation interacts with an OVER clause with a frame. Can be allowed (frame is optional), required (frame is mandatory for pushdown), and disallowed (frame is not permitted).",
                    "type":"string",
                    "enum":[
                      "allowed",
                      "required",
                      "disallowed"
                    ]
                  }
                }
              }
            ]
          }
        }
      }
    }
  }
}
