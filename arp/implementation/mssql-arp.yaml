#
# Copyright (C) 2017-2019 Dremio Corporation. This file is confidential and private property.
#

metadata:
  name: MSSQL
  apiname: mssql
  spec_version: '1'

syntax:
  identifier_quote: '['
  identifier_length_limit: 128
  allows_boolean_literal: false
  map_boolean_literal_to_bit: false

data_types:
  mappings:
  # MSSQL typenames.
  - source:
      name: "time"
      max_scale: 7
    required_cast_args: "precision"
    dremio:
      name: "time"
    default_cast_spec: true
  - source:
      name: "uniqueidentifier"
      max_precision: 8000
      literal_length_limit: 8000
    required_cast_args: "precision"
    dremio:
      name: "varbinary"
  - source:
      name: "ntext"
      max_precision: 1073741823
      literal_length_limit: 1073741823
    required_cast_args: "precision"
    dremio:
      name: "varchar"
  - source:
      name: "nvarchar"
      max_precision: 4000
      literal_length_limit: 4000
    required_cast_args: "precision"
    dremio:
      name: "varchar"
  - source:
      name: "sysname"
      max_precision: 4000
      literal_length_limit: 4000
    required_cast_args: "precision"
    dremio:
      name: "varchar"
  - source:
      name: "nchar"
      max_precision: 4000
      literal_length_limit: 4000
    required_cast_args: "precision"
    dremio:
      name: "varchar"
  - source:
      name: "bit"
    dremio:
      name: "boolean"
    default_cast_spec: true
  - source:
      name: "tinyint"
    dremio:
      name: "integer"
  - source:
      name: "tinyint identity"
    dremio:
      name: "integer"
  - source:
      name: "bigint"
    dremio:
      name: "bigint"
    default_cast_spec: true
  - source:
      name: "bigint identity"
    dremio:
      name: "bigint"
  - source:
      name: "image"
      max_precision: 2147483647
      literal_length_limit: 2147483647
    required_cast_args: "precision"
    dremio:
      name: "varbinary"
  - source:
      name: "varbinary"
      max_precision: 8000
      literal_length_limit: 8000
    required_cast_args: "precision"
    dremio:
      name: "varbinary"
    default_cast_spec: true
  - source:
      name: "binary"
      max_precision: 8000
      literal_length_limit: 8000
    required_cast_args: "precision"
    dremio:
      name: "varbinary"
  # Review - removed manually.
  # - source:
  #     name: "timestamp"
  #     max_precision: 8000
  #     literal_length_limit: 8000
  #   dremio:
  #     name: "varbinary"
  - source:
      name: "text"
      max_precision: 2147483647
      literal_length_limit: 2147483647
    required_cast_args: "precision"
    dremio:
      name: "varchar"
  - source:
      name: "char"
      max_precision: 8000
      literal_length_limit: 8000
    required_cast_args: "precision"
    dremio:
      name: "varchar"
  - source:
      name: "numeric"
      max_precision: 38
      max_scale: 38
    required_cast_args: "precision_scale"
    dremio:
      name: "decimal"
  - source:
      name: "numeric() identity"
    dremio:
      name: "decimal"
  - source:
      name: "decimal"
      max_precision: 38
      max_scale: 38
    required_cast_args: "precision_scale"
    dremio:
      name: "decimal"
    # default_cast_spec: true
  - source:
      name: "money"
      max_precision: 4
      max_scale: 4
    dremio:
      name: "decimal"
  - source:
      name: "smallmoney"
      max_precision: 4
      max_scale: 4
    dremio:
      name: "decimal"
  - source:
      name: "decimal() identity"
    required_cast_args: "precision_scale"
    dremio:
      name: "decimal"
  - source:
      name: "int"
    dremio:
      name: "integer"
    default_cast_spec: true
  - source:
      name: "int identity"
    dremio:
      name: "integer"
  - source:
      name: "smallint"
    dremio:
      name: "integer"
  - source:
      name: "smallint identity"
    dremio:
      name: "integer"
  - source:
      name: "float"
    dremio:
      name: "double"
    # SQL Server uses FLOAT as a CAST argument to specify 64-bit floating point.
    default_cast_spec: true
  - source:
      name: "real"
    dremio:
      name: "float"
  - source:
      name: "varchar"
      max_precision: 8000
      literal_length_limit: 8000
    required_cast_args: "precision"
    dremio:
      name: "varchar"
    default_cast_spec: true
  - source:
      name: "date"
    dremio:
      name: "date"
    default_cast_spec: true
  - source:
      name: "datetime2"
      max_scale: 7
    required_cast_args: "none"
    # review
    dremio:
      name: "timestamp"
    default_cast_spec: true
  - source:
      name: "datetime"
      max_scale: 3
    required_cast_args: "none"
    #review
    dremio:
      name: "timestamp"
  - source:
      name: "smalldatetime"
    required_cast_args: "none"
    dremio:
      name: "timestamp"
relational_algebra:
  aggregation:
    enable: true
    distinct: true
    group_by_ordinal: false
    count_functions:
      count_star:
        enable: true
        variable_rewrite:
          separator_sequence:
            - ', '
          rewrite_format: 'COUNT_BIG(*)'
      count:
        enable: true
        variable_rewrite:
          separator_sequence:
            - ', '
          rewrite_format: 'COUNT_BIG({separator[0]})'
      count_multi:
        enable: true
        variable_rewrite:
          separator_sequence:
            - ' IS NULL OR '
          rewrite_format: 'SUM(CAST(CASE WHEN {separator[0]} IS NULL THEN 0 ELSE 1 END AS BIGINT))'
      count_distinct:
        enable: true
        variable_rewrite:
          separator_sequence:
            - ', '
          rewrite_format: 'COUNT_BIG(DISTINCT {separator[0]})'
      count_distinct_multi:
        enable: true
        variable_rewrite:
          separator_sequence:
            - ' IS NULL OR '
            - ', '
          rewrite_format: 'COUNT_BIG(DISTINCT CASE WHEN {separator[0]} IS NULL THEN NULL ELSE CONCAT({separator[1]}) END)'
    functions:
    - names:
      - "avg"
      signatures:
      - args:
        - "integer"
        return: "integer"
        rewrite: "AVG(CAST({0} AS DOUBLE PRECISION))"
      - args:
        - "decimal"
        return: "decimal"
      - args:
        - "double"
        return: "double"
      - args:
        - "bigint"
        return: "bigint"
        rewrite: "AVG(CAST({0} AS DOUBLE PRECISION))"
      - args:
        - "float"
        return: "double"
        rewrite: "AVG(CAST({0} AS DOUBLE PRECISION))"
    - names:
      - "sum"
      signatures:
      - args:
        - "integer"
        return: "bigint"
        rewrite: "SUM(CAST({0} AS BIGINT))"
      - args:
        - "double"
        return: "double"
      - args:
        - "bigint"
        return: "bigint"
      - args:
        - "decimal"
        return: "decimal"
      - args:
        - "float"
        return: "double"
        rewrite: "SUM(CAST({0} AS DOUBLE PRECISION))"
    - names:
      - "max"
      - "min"
      signatures:
      - args:
        - "integer"
        return: "integer"
      - args:
        - "varbinary"
        return: "varbinary"
      - args:
        - "timestamp"
        return: "timestamp"
      - args:
        - "decimal"
        return: "decimal"
      - args:
        - "double"
        return: "double"
      - args:
        - "date"
        return: "date"
      - args:
        - "time"
        return: "time"
      - args:
        - "bigint"
        return: "bigint"
      - args:
        - "float"
        return: "float"
      - args:
        - "varchar"
        return: "varchar"
  allow_set_operators_with_sort: true
  except:
    enable: true
  project:
    enable: true
  join:
    enable: true
    cross:
      enable: true
      # rewrite: "{0} cross join {1}"
      # review
    inner:
      enable: true
      inequality: true
    left:
      enable: true
      inequality: true
    right:
      enable: true
      inequality: true
    full:
      enable: true
      inequality: true
      rewrite: "{0} FULL JOIN {1} ON {2}"
  sort:
    enable: true
    order_by:
      enable: true
      default_nulls_ordering: low
    fetch_offset:
      offset_fetch:
        enable: true
        # Syntax is only supported in subqueries. Logic handled in MSSQLRelToSqlConverter.
        format: 'OFFSET {0} ROWS FETCH NEXT {1} ROWS ONLY'
      offset_only:
        enable: true
        format: 'OFFSET {0} ROWS'
      fetch_only:
        # Limit is supported as 'TOP', but rewriting is handled in MSSQLDialect.
        enable: true
        format: 'OFFSET 0 ROWS FETCH NEXT {0} ROWS ONLY'
        # format: 'LIMIT {0}'
  union:
    enable: true
  union_all:
    enable: true
  values:
    enable: true
    method: values
expressions:
  subqueries:
    enable: true
    correlated: true
    scalar: true
    in_clause: true
    exists_clause: true
  supports_case: true
  supports_over: true
  datetime_formats:
    era:
      enable: false
    meridian:
      enable: false
    century:
      enable: false
    week_of_year:
      enable: false
    day_of_week:
      enable: false
    day_name_abbreviated:
      enable: false
    day_name:
      enable: false
    year_4:
      enable: false
    year_2:
      enable: false
    day_of_year:
      enable: false
    month:
      enable: false
    month_name_abbreviated:
      enable: false
    month_name:
      enable: false
    day_of_month:
      enable: false
    hour_12:
      enable: false
    hour_24:
      enable: false
    minute:
      enable: false
    second:
      enable: false
    millisecond:
      enable: false
    timezone_abbreviation:
      enable: false
    timezone_offset:
      enable: false
  operators:
  # Custom Expressions - Added manually
  - names:
    - "cast"
    # These rewrites for CAST are to handle casting a string containing decimal digits
    # such as '123.45' cast to an integer successfully. Dremio allows for this but
    # SQL Server will fail. We cast to an interim DECIMAL that can hold all digits
    # in the largest bigint and as many decimal places as possible.
    signatures:
    - args:
      - "varchar"
      return: "integer"
      rewrite: "CAST(ROUND(CAST({0} AS DECIMAL(38,17)), 0, 1) AS INTEGER)"
    - args:
      - "varchar"
      return: "bigint"
      rewrite: "CAST(ROUND(CAST({0} AS DECIMAL(38,17)), 0, 1) AS BIGINT)"

  - names:
    - "atan2"
    signatures:
    - args:
      - "decimal"
      - "decimal"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "decimal"
      - "double"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "decimal"
      - "float"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "decimal"
      - "bigint"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "decimal"
      - "integer"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "double"
      - "decimal"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "double"
      - "double"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "double"
      - "float"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "double"
      - "bigint"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "double"
      - "integer"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "float"
      - "decimal"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "float"
      - "double"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "float"
      - "float"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "float"
      - "bigint"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "float"
      - "integer"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "bigint"
      - "decimal"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "bigint"
      - "double"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "bigint"
      - "float"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "bigint"
      - "bigint"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "bigint"
      - "integer"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "integer"
      - "decimal"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "integer"
      - "double"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "integer"
      - "float"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "integer"
      - "bigint"
      return: "double"
      rewrite: "ATN2({0},{1})"
    - args:
      - "integer"
      - "integer"
      return: "double"
      rewrite: "ATN2({0},{1})"
  - names:
    - "pi"
    signatures:
    - return: "decimal"
      args: []
  - names:
    - "ceil"
    - "ceiling"
    signatures:
    - args:
      - "decimal"
      return: "decimal"
      rewrite: "CEILING({0})"
    - args:
      - "double"
      return: "double"
      rewrite: "CEILING({0})"
    - args:
      - "float"
      return: "float"
      rewrite: "CEILING({0})"
    - args:
      - "bigint"
      return: "bigint"
      rewrite: "CEILING({0})"
    - args:
      - "integer"
      return: "integer"
      rewrite: "CEILING({0})"
  - names:
    - "mod"
    signatures:
    - args:
      - "decimal"
      - "decimal"
      return: "decimal"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "decimal"
      - "double"
      return: "double"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "decimal"
      - "float"
      return: "double"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "decimal"
      - "bigint"
      return: "decimal"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "decimal"
      - "integer"
      return: "decimal"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "double"
      - "decimal"
      return: "double"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "double"
      - "double"
      return: "double"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "double"
      - "float"
      return: "double"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "double"
      - "bigint"
      return: "double"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "double"
      - "integer"
      return: "double"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "float"
      - "decimal"
      return: "float"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "float"
      - "double"
      return: "double"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "float"
      - "float"
      return: "float"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "float"
      - "bigint"
      return: "float"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "float"
      - "integer"
      return: "float"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "bigint"
      - "decimal"
      return: "bigint"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "bigint"
      - "double"
      return: "double"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "bigint"
      - "float"
      return: "float"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "bigint"
      - "bigint"
      return: "bigint"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "bigint"
      - "integer"
      return: "integer"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "integer"
      - "decimal"
      return: "decimal"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "integer"
      - "double"
      return: "double"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "integer"
      - "float"
      return: "float"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "integer"
      - "bigint"
      return: "bigint"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "integer"
      - "integer"
      return: "integer"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
  - names:
    - "*"
    signatures:
    - args:
      - "interval_day_second"
      - "integer"
      return: "interval_day_second"
    - args:
      - "interval_day_second"
      - "bigint"
      return: "interval_day_second"
    - args:
      - "interval_day_second"
      - "double"
      return: "interval_day_second"
    - args:
      - "interval_year_month"
      - "integer"
      return: "interval_year_month"
    - args:
      - "interval_year_month"
      - "bigint"
      return: "interval_year_month"
    - args:
      - "interval_year_month"
      - "double"
      return: "interval_year_month"
  - names:
    - "position"
    - "locate"
    signatures:
    - args:
      - "varchar"
      - "varchar"
      return: "integer"
      rewrite: "CHARINDEX({0}, {1})"
    - args:
      - "varchar"
      - "varchar"
      - "integer"
      return: "integer"
      rewrite: "CHARINDEX({0}, {1}, {2})"
    - args:
      - "varchar"
      - "varchar"
      - "bigint"
      return: "integer"
      rewrite: "CHARINDEX({0}, {1}, {2})"
  - names:
    - "substring"
    signatures:
    - args:
      - "varchar"
      - "bigint"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, 9223372036854775807)"
    - args:
      - "varchar"
      - "integer"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, 9223372036854775807)"
    - args:
      - "varchar"
      - "double"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, 9223372036854775807)"
    - args:
      - "varchar"
      - "float"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, 9223372036854775807)"
  - names:
    - "-"
    signatures:
    - args:
      - "timestamp"
      - "interval_day_second"
      return: "timestamp"
    - args:
      - "timestamp"
      - "interval_year_month"
      return: "timestamp"
    - args:
      - "date"
      - "interval_day_second"
      return: "date"
    - args:
      - "date"
      - "interval_day_second"
      return: "timestamp"
    - args:
      - "date"
      - "interval_year_month"
      return: "date"
    - args:
      - "date"
      - "interval_year_month"
      return: "timestamp"
    - args:
      - "time"
      - "interval_day_second"
      return: "timestamp"
    - args:
      - "time"
      - "interval_year_month"
      return: "timestamp"
  - names:
    - "truncate"
    - "trunc"
    signatures:
    - args:
      - "decimal"
      - "integer"
      return: "decimal"
      rewrite: "ROUND({0}, {1}, 1)"
    - args:
      - "integer"
      - "integer"
      return: "integer"
      rewrite: "ROUND({0}, {1}, 1)"
    - args:
      - "bigint"
      - "integer"
      return: "bigint"
      rewrite: "ROUND({0}, {1}, 1)"
    - args:
      - "double"
      - "integer"
      return: "double"
      # Convert doubles to varchar, then decimal to resolve inconsistent rounding behavior due to
      # floating point in accuracy. This accuracy happens if you cast float to decimal directly as well.
      rewrite: "ROUND(CAST(LTRIM(STR({0}, 50, 15)) AS DECIMAL(38,17)), {1}, 1)"
    - args:
      - "float"
      - "integer"
      return: "float"
      # Convert doubles to varchar, then decimal to resolve inconsistent rounding behavior due to
      # floating point in accuracy. This accuracy happens if you cast float to decimal directly as well.
      rewrite: "ROUND(CAST(LTRIM(STR({0}, 50, 15)) AS DECIMAL(38,17)), {1}, 1)"
    - args:
      - "integer"
      return: "integer"
      rewrite: "ROUND({0}, 0, 1)"
    - args:
      - "bigint"
      return: "bigint"
      rewrite: "ROUND({0}, 0, 1)"
    - args:
      - "decimal"
      return: "decimal"
      rewrite: "ROUND({0}, 0, 1)"
    - args:
      - "double"
      return: "double"
      # Convert doubles to varchar, then decimal to resolve inconsistent rounding behavior due to
      # floating point in accuracy. This accuracy happens if you cast float to decimal directly as well.
      rewrite: "ROUND(CAST(LTRIM(STR({0}, 50, 15)) AS DECIMAL(38,17)), 0, 1)"
    - args:
      - "float"
      return: "float"
      # Convert doubles to varchar, then decimal to resolve inconsistent rounding behavior due to
      # floating point in accuracy. This accuracy happens if you cast float to decimal directly as well.
      rewrite: "ROUND(CAST(LTRIM(STR({0}, 50, 15)) AS DECIMAL(38,17)), 0, 1)"
  - names:
    - "reverse"
    signatures:
    - args:
      - "varchar"
      return: "varchar"
  - names:
    - "rpad"
      # May need to modify if {1} is < than length of {0}
    signatures:
    - args:
      - "varchar"
      - "integer"
      return: "varchar"
      rewrite: "LEFT(({0} + SPACE({1})), {1})"
    - args:
      - "varchar"
      - "bigint"
      return: "varchar"
      rewrite: "LEFT(({0} + SPACE({1})), {1})"
    - args:
      - "varchar"
      - "integer"
      - "varchar"
      return: "varchar"
      rewrite: "LEFT(({0} + REPLICATE({2}, {1})), {1})"
    - args:
      - "varchar"
      - "bigint"
      - "varchar"
      return: "varchar"
      rewrite: "LEFT(({0} + REPLICATE({2}, {1})), {1})"
  - names:
    - "lpad"
      # May need to modify if {1} is < than length of {0}
    signatures:
    - args:
      - "varchar"
      - "integer"
      return: "varchar"
      rewrite: "RIGHT((SPACE({1}) + {0}), {1})"
    - args:
      - "varchar"
      - "bigint"
      return: "varchar"
      rewrite: "RIGHT((SPACE({1}) + {0}), {1})"
    - args:
      - "varchar"
      - "integer"
      - "varchar"
      return: "varchar"
      rewrite: "RIGHT((REPLICATE({2}, {1}) + {0}), {1})"
    - args:
      - "varchar"
      - "bigint"
      - "varchar"
      return: "varchar"
      rewrite: "RIGHT((REPLICATE({2}, {1}) + {0}), {1})"
  - names:
    - "not"
    signatures:
    - args:
      - "boolean"
      return: "boolean"
  - names:
    - extract_year
    signatures:
    - return: bigint
      args:
        - date
    - return: bigint
      args:
        - timestamp
    - return: bigint
      args:
        - time
    - return: bigint
      args:
        - interval_year_month
    - return: bigint
      args:
        - interval_day_second
  - names:
    - extract_month
    signatures:
    - return: bigint
      args:
        - date
    - return: bigint
      args:
        - timestamp
    - return: bigint
      args:
        - time
    - return: bigint
      args:
        - interval_year_month
    - return: bigint
      args:
        - interval_day_second
  - names:
    - extract_day
    signatures:
    - return: bigint
      args:
        - date
    - return: bigint
      args:
        - timestamp
    - return: bigint
      args:
        - time
    - return: bigint
      args:
        - interval_year_month
    - return: bigint
      args:
        - interval_day_second
  - names:
    - extract_hour
    signatures:
    - return: bigint
      args:
        - date
      rewrite: "DATEPART(HOUR, CAST({0} AS DATETIME2))"
    - return: bigint
      args:
        - timestamp
      rewrite: "DATEPART(HOUR, {0})"
    - return: bigint
      args:
        - time
      rewrite: "DATEPART(HOUR, {0})"
    - return: bigint
      args:
        - interval_year_month
      rewrite: "DATEPART(HOUR, {0})"
    - return: bigint
      args:
        - interval_day_second
      rewrite: "DATEPART(HOUR, {0})"
  - names:
    - extract_minute
    signatures:
    - return: bigint
      args:
        - date
      rewrite: "DATEPART(MINUTE, CAST({0} AS DATETIME2))"
    - return: bigint
      args:
        - timestamp
      rewrite: "DATEPART(MINUTE, {0})"
    - return: bigint
      args:
        - time
      rewrite: "DATEPART(MINUTE, {0})"
    - return: bigint
      args:
        - interval_year_month
      rewrite: "DATEPART(MINUTE, {0})"
    - return: bigint
      args:
        - interval_day_second
      rewrite: "DATEPART(MINUTE, {0})"
  - names:
    - extract_second
    signatures:
    - return: bigint
      args:
        - date
      rewrite: "DATEPART(SECOND, CAST({0} AS DATETIME2))"
    - return: bigint
      args:
        - timestamp
      rewrite: "DATEPART(SECOND, {0})"
    - return: bigint
      args:
        - time
      rewrite: "DATEPART(SECOND, {0})"
    - return: bigint
      args:
        - interval_year_month
      rewrite: "DATEPART(SECOND, {0})"
    - return: bigint
      args:
        - interval_day_second
      rewrite: "DATEPART(SECOND, {0})"
  - names:
    - extract_dow
    signatures:
    - return: bigint
      args:
        - date
      rewrite: "DATEPART(WEEKDAY, {0})"
    - return: bigint
      args:
        - timestamp
      rewrite: "DATEPART(WEEKDAY, {0})"
    - return: bigint
      args:
        - time
      rewrite: "DATEPART(WEEKDAY, {0})"
    - return: bigint
      args:
        - interval_year_month
      rewrite: "DATEPART(WEEKDAY, {0})"
    - return: bigint
      args:
        - interval_day_second
      rewrite: "DATEPART(WEEKDAY, {0})"
  - names:
    - extract_doy
    signatures:
    - return: bigint
      args:
        - date
      rewrite: "DATEPART(DAYOFYEAR, {0})"
    - return: bigint
      args:
        - timestamp
      rewrite: "DATEPART(DAYOFYEAR, {0})"
    - return: bigint
      args:
        - time
      rewrite: "DATEPART(DAYOFYEAR, {0})"
    - return: bigint
      args:
        - interval_year_month
      rewrite: "DATEPART(DAYOFYEAR, {0})"
    - return: bigint
      args:
        - interval_day_second
      rewrite: "DATEPART(DAYOFYEAR, {0})"
  - names:
    - extract_quarter
    signatures:
    - return: bigint
      args:
        - date
      rewrite: "DATEPART(QUARTER, {0})"
    - return: bigint
      args:
        - timestamp
      rewrite: "DATEPART(QUARTER, {0})"
    - return: bigint
      args:
        - time
      rewrite: "DATEPART(QUARTER, {0})"
    - return: bigint
      args:
        - interval_year_month
      rewrite: "DATEPART(QUARTER, {0})"
    - return: bigint
      args:
        - interval_day_second
      rewrite: "DATEPART(QUARTER, {0})"
  - names:
    - extract_week
    signatures:
    - return: bigint
      args:
        - date
      rewrite: "DATEPART(ISO_WEEK, {0})"
    - return: bigint
      args:
        - timestamp
      rewrite: "DATEPART(ISO_WEEK, {0})"
    - return: bigint
      args:
        - time
      rewrite: "DATEPART(ISO_WEEK, {0})"
    - return: bigint
      args:
        - interval_year_month
      rewrite: "DATEPART(ISO_WEEK, {0})"
    - return: bigint
      args:
        - interval_day_second
      rewrite: "DATEPART(ISO_WEEK, {0})"
  - names:
    - "date_trunc_year"
    signatures:
      - return: "timestamp"
        args:
          - "timestamp"
        rewrite: "CONVERT(DATETIME, CONVERT(VARCHAR(4), {0}, 120) + ''-01-01'')"
      - return: "date"
        args:
          - "date"
        rewrite: "CONVERT(DATETIME, CONVERT(VARCHAR(4), {0}, 120) + ''-01-01'')"
  - names:
    - "date_trunc_month"
    signatures:
      - return: "timestamp"
        args:
          - "timestamp"
        rewrite: "CONVERT(DATETIME, CONVERT(VARCHAR(7), {0}, 120) + ''-01'')"
      - return: "date"
        args:
          - "date"
        rewrite: "CONVERT(DATETIME, CONVERT(VARCHAR(7), {0}, 120) + ''-01'')"
  - names:
    - "date_trunc_day"
    signatures:
      - return: "timestamp"
        args:
          - "timestamp"
        rewrite: "CONVERT(DATETIME, CONVERT(DATE, {0}))"
      - return: "date"
        args:
          - "date"
        rewrite: "CONVERT(DATETIME, CONVERT(DATE, {0}))"
  - names:
    - "date_trunc_hour"
    signatures:
      - return: "timestamp"
        args:
          - "timestamp"
        rewrite: "CONVERT(DATETIME, CONVERT(VARCHAR(13), {0}, 120) + '':00:00'')"
  - names:
    - "date_trunc_minute"
    signatures:
      - return: "timestamp"
        args:
          - "timestamp"
        rewrite: "CONVERT(DATETIME, CONVERT(VARCHAR(16), {0}, 120) + '':00'')"

  - names:
    - timestampadd_quarter
    signatures:
    - return: timestamp
      args:
        - integer
        - timestamp
      rewrite: "DATEADD(quarter, {0}, {1})"
    - return: timestamp
      args:
        - bigint
        - timestamp
      rewrite: "DATEADD(quarter, {0}, {1})"
    - return: timestamp
      args:
        - integer
        - time
      rewrite: "DATEADD(quarter, {0}, convert(DATETIME2, {1}))"
    - return: timestamp
      args:
        - bigint
        - time
      rewrite: "DATEADD(quarter, {0}, convert(DATETIME2, {1}))"
    - return: date
      args:
        - integer
        - date
      rewrite: "DATEADD(quarter, {0}, {1})"
    - return: date
      args:
        - bigint
        - date
      rewrite: "DATEADD(quarter, {0}, {1})"
  - names:
    - timestampadd_year
    signatures:
    - return: timestamp
      args:
        - integer
        - timestamp
      rewrite: "DATEADD(year, {0}, {1})"
    - return: timestamp
      args:
        - bigint
        - timestamp
      rewrite: "DATEADD(year, {0}, {1})"
    - return: timestamp
      args:
        - integer
        - time
      rewrite: "DATEADD(year, {0}, convert(DATETIME2, {1}))"
    - return: timestamp
      args:
        - bigint
        - time
      rewrite: "DATEADD(year, {0}, convert(DATETIME2, {1}))"
    - return: date
      args:
        - integer
        - date
      rewrite: "DATEADD(year, {0}, {1})"
    - return: date
      args:
        - bigint
        - date
      rewrite: "DATEADD(year, {0}, {1})"
  - names:
    - timestampadd_month
    signatures:
    - return: timestamp
      args:
        - integer
        - timestamp
      rewrite: "DATEADD(month, {0}, {1})"
    - return: timestamp
      args:
        - bigint
        - timestamp
      rewrite: "DATEADD(month, {0}, {1})"
    - return: timestamp
      args:
        - integer
        - time
      rewrite: "DATEADD(month, {0}, convert(DATETIME2, {1}))"
    - return: timestamp
      args:
        - bigint
        - time
      rewrite: "DATEADD(month, {0}, convert(DATETIME2, {1}))"
    - return: date
      args:
        - integer
        - date
      rewrite: "DATEADD(month, {0}, {1})"
    - return: date
      args:
        - bigint
        - date
      rewrite: "DATEADD(month, {0}, {1})"
  - names:
    - timestampadd_day
    signatures:
    - return: timestamp
      args:
        - integer
        - timestamp
      rewrite: "DATEADD(day, {0}, {1})"
    - return: timestamp
      args:
        - bigint
        - timestamp
      rewrite: "DATEADD(day, {0}, {1})"
    - return: timestamp
      args:
        - integer
        - time
      rewrite: "DATEADD(day, {0}, convert(DATETIME2, {1}))"
    - return: timestamp
      args:
        - bigint
        - time
      rewrite: "DATEADD(day, {0}, convert(DATETIME2, {1}))"
    - return: date
      args:
        - integer
        - date
      rewrite: "DATEADD(day, {0}, {1})"
    - return: date
      args:
        - bigint
        - date
      rewrite: "DATEADD(day, {0}, {1})"
  - names:
    - timestampadd_hour
    signatures:
    - return: timestamp
      args:
        - integer
        - timestamp
      rewrite: "DATEADD(hour, {0}, {1})"
    - return: timestamp
      args:
        - bigint
        - timestamp
      rewrite: "DATEADD(hour, {0}, {1})"
    - return: time
      args:
        - integer
        - time
      rewrite: "DATEADD(hour, {0}, {1})"
    - return: time
      args:
        - bigint
        - time
      rewrite: "DATEADD(hour, {0}, {1})"
    - return: timestamp
      args:
        - integer
        - date
      rewrite: "DATEADD(hour, {0}, CONVERT(DATETIME2, {1})"
    - return: timestamp
      args:
        - bigint
        - date
      rewrite: "DATEADD(hour, {0}, CONVERT(DATETIME2, {1}))"
  - names:
    - timestampadd_minute
    signatures:
    - return: timestamp
      args:
        - integer
        - timestamp
      rewrite: "DATEADD(minute, {0}, {1})"
    - return: timestamp
      args:
        - bigint
        - timestamp
      rewrite: "DATEADD(minute, {0}, {1})"
    - return: time
      args:
        - integer
        - time
      rewrite: "DATEADD(minute, {0}, {1})"
    - return: time
      args:
        - bigint
        - time
      rewrite: "DATEADD(minute, {0}, {1})"
    - return: timestamp
      args:
        - integer
        - date
      rewrite: "DATEADD(minute, {0}, CONVERT(DATETIME2, {1}))"
    - return: timestamp
      args:
        - bigint
        - date
      rewrite: "DATEADD(minute, {0}, CONVERT(DATETIME2, {1}))"
  - names:
    - timestampadd_second
    signatures:
    - return: timestamp
      args:
        - integer
        - timestamp
      rewrite: "DATEADD(second, {0}, {1})"
    - return: timestamp
      args:
        - bigint
        - timestamp
      rewrite: "DATEADD(second, {0}, {1})"
    - return: time
      args:
        - integer
        - time
      rewrite: "DATEADD(second, {0}, {1})"
    - return: time
      args:
        - bigint
        - time
      rewrite: "DATEADD(second, {0}, {1})"
    - return: timestamp
      args:
        - integer
        - date
      rewrite: "DATEADD(second, {0}, CONVERT(DATETIME2, {1}))"
    - return: timestamp
      args:
        - bigint
        - date
      rewrite: "DATEADD(second, {0}, CONVERT(DATETIME2, {1}))"

  - names:
    - timestampdiff_quarter
    signatures:
    - return: integer
      args:
        - timestamp
        - timestamp
    - return: integer
      args:
        - time
        - time
    - return: integer
      args:
        - date
        - date
    - return: integer
      args:
        - timestamp
        - date
    - return: integer
      args:
        - timestamp
        - time
    - return: integer
      args:
        - time
        - timestamp
    - return: integer
      args:
        - time
        - date
    - return: integer
      args:
        - date
        - time
    - return: integer
      args:
        - date
        - timestamp

  - names:
    - timestampdiff_year
    signatures:
    # Don't include time signatures as SQL Server errors on conversion of time to date or timestamp.
    - return: integer
      args:
        - timestamp
        - timestamp
      rewrite: "(DATEDIFF(YEAR, {0}, {1}) - CASE WHEN {0} < {1} AND DATEPART(DAYOFYEAR, {0}) > DATEPART(DAYOFYEAR, {1}) THEN 1 WHEN {1} < {0} AND DATEPART(DAYOFYEAR, {1}) > DATEPART(DAYOFYEAR, {0}) THEN -1 ELSE 0 END) "
    - return: integer
      args:
        - date
        - date
      rewrite: "(DATEDIFF(YEAR, {0}, {1}) - CASE WHEN {0} < {1} AND DATEPART(DAYOFYEAR, {0}) > DATEPART(DAYOFYEAR, {1}) THEN 1 WHEN {1} < {0} AND DATEPART(DAYOFYEAR, {1}) > DATEPART(DAYOFYEAR, {0}) THEN -1 ELSE 0 END) "
    - return: integer
      args:
        - timestamp
        - date
      rewrite: "(DATEDIFF(YEAR, {0}, {1}) - CASE WHEN {0} < {1} AND DATEPART(DAYOFYEAR, {0}) > DATEPART(DAYOFYEAR, {1}) THEN 1 WHEN {1} < {0} AND DATEPART(DAYOFYEAR, {1}) > DATEPART(DAYOFYEAR, {0}) THEN -1 ELSE 0 END) "
    - return: integer
      args:
        - date
        - timestamp
      rewrite: "(DATEDIFF(YEAR, {0}, {1}) - CASE WHEN {0} < {1} AND DATEPART(DAYOFYEAR, {0}) > DATEPART(DAYOFYEAR, {1}) THEN 1 WHEN {1} < {0} AND DATEPART(DAYOFYEAR, {1}) > DATEPART(DAYOFYEAR, {0}) THEN -1 ELSE 0 END) "
  - names:
    - timestampdiff_month
    signatures:
    # Don't include time signatures as SQL Server errors on conversion of time to date or timestamp.
    - return: integer
      args:
        - timestamp
        - timestamp
      rewrite: "(DATEDIFF(MONTH, {0}, {1}) - CASE WHEN {0} < {1} AND DATEPART(DAY, {0}) > DATEPART(DAY, {1}) THEN 1 WHEN {1} < {0} AND DATEPART(DAY, {1}) > DATEPART(DAY, {0}) THEN -1 ELSE 0 END) "
    - return: integer
      args:
        - date
        - date
      rewrite: "(DATEDIFF(MONTH, {0}, {1}) - CASE WHEN {0} < {1} AND DATEPART(DAY, {0}) > DATEPART(DAY, {1}) THEN 1 WHEN {1} < {0} AND DATEPART(DAY, {1}) > DATEPART(DAY, {0}) THEN -1 ELSE 0 END) "
    - return: integer
      args:
        - timestamp
        - date
      rewrite: "(DATEDIFF(MONTH, {0}, {1}) - CASE WHEN {0} < {1} AND DATEPART(DAY, {0}) > DATEPART(DAY, {1}) THEN 1 WHEN {1} < {0} AND DATEPART(DAY, {1}) > DATEPART(DAY, {0}) THEN -1 ELSE 0 END) "
    - return: integer
      args:
        - date
        - timestamp
      rewrite: "(DATEDIFF(MONTH, {0}, {1}) - CASE WHEN {0} < {1} AND DATEPART(DAY, {0}) > DATEPART(DAY, {1}) THEN 1 WHEN {1} < {0} AND DATEPART(DAY, {1}) > DATEPART(DAY, {0}) THEN -1 ELSE 0 END) "

  - names:
    - timestampdiff_week
    signatures:
    # Don't include time signatures as SQL Server errors on conversion of time to date or timestamp.
    - return: integer
      args:
        - timestamp
        - timestamp
    - return: integer
      args:
        - date
        - date
    - return: integer
      args:
        - timestamp
        - date
    - return: integer
      args:
        - date
        - timestamp

  - names:
    - timestampdiff_day
    signatures:
    # Don't include time signatures as SQL Server errors on conversion of time to date or timestamp.
    - return: integer
      args:
        - timestamp
        - timestamp
    - return: integer
      args:
        - date
        - date
    - return: integer
      args:
        - timestamp
        - date
    - return: integer
      args:
        - date
        - timestamp

  - names:
    - timestampdiff_hour
    signatures:
    - return: integer
      args:
        - timestamp
        - timestamp
    - return: integer
      args:
        - time
        - time
    - return: integer
      args:
        - date
        - date
    - return: integer
      args:
        - timestamp
        - date
    - return: integer
      args:
        - timestamp
        - time
    - return: integer
      args:
        - time
        - timestamp
    - return: integer
      args:
        - time
        - date
    - return: integer
      args:
        - date
        - time
    - return: integer
      args:
        - date
        - timestamp

  - names:
    - timestampdiff_minute
    signatures:
    - return: integer
      args:
        - timestamp
        - timestamp
    - return: integer
      args:
        - time
        - time
    - return: integer
      args:
        - date
        - date
    - return: integer
      args:
        - timestamp
        - date
    - return: integer
      args:
        - timestamp
        - time
    - return: integer
      args:
        - time
        - timestamp
    - return: integer
      args:
        - time
        - date
    - return: integer
      args:
        - date
        - time
    - return: integer
      args:
        - date
        - timestamp

  - names:
    - timestampdiff_second
    signatures:
    - return: integer
      args:
        - timestamp
        - timestamp
    - return: integer
      args:
        - time
        - time
    - return: integer
      args:
        - date
        - date
    - return: integer
      args:
        - timestamp
        - date
    - return: integer
      args:
        - timestamp
        - time
    - return: integer
      args:
        - time
        - timestamp
    - return: integer
      args:
        - time
        - date
    - return: integer
      args:
        - date
        - time
    - return: integer
      args:
        - date
        - timestamp
  - names:
    - "||"
    signatures:
    - args:
      - "varchar"
      - "varchar"
      return: "varchar"
      rewrite: "({0} + {1})"
  # Generated Expressions
  - names:
    - "-"
    signatures:
    - args:
      - "integer"
      return: "integer"
    - args:
      - "double"
      return: "double"
    - args:
      - "bigint"
      return: "bigint"
    - args:
      - "float"
      return: "float"
    - args:
      - "decimal"
      return: "decimal"
  - names:
    - "+"
    signatures:
    - args:
      - "integer"
      return: "integer"
    - args:
      - "double"
      return: "double"
    - args:
      - "bigint"
      return: "bigint"
    - args:
      - "float"
      return: "float"
    - args:
      - "decimal"
      return: "decimal"
  - names:
    - "+"
    - "-"
    signatures:
    - args:
      - "decimal"
      - "decimal"
      return: "decimal"
    - args:
      - "decimal"
      - "double"
      return: "double"
    - args:
      - "decimal"
      - "float"
      return: "double"
    - args:
      - "decimal"
      - "bigint"
      return: "decimal"
    - args:
      - "decimal"
      - "integer"
      return: "decimal"
    - args:
      - "decimal"
      - "boolean"
      return: "decimal"
    - args:
      - "decimal"
      - "varchar"
      return: "decimal"
    - args:
      - "double"
      - "double"
      return: "double"
    - args:
      - "double"
      - "decimal"
      return: "double"
    - args:
      - "double"
      - "float"
      return: "double"
    - args:
      - "double"
      - "bigint"
      return: "double"
    - args:
      - "double"
      - "integer"
      return: "double"
    - args:
      - "double"
      - "boolean"
      return: "double"
    - args:
      - "double"
      - "varchar"
      return: "double"
    - args:
      - "float"
      - "double"
      return: "double"
    - args:
      - "float"
      - "decimal"
      return: "double"
    - args:
      - "float"
      - "float"
      return: "float"
    - args:
      - "float"
      - "bigint"
      return: "float"
    - args:
      - "float"
      - "integer"
      return: "float"
    - args:
      - "float"
      - "boolean"
      return: "float"
    - args:
      - "float"
      - "varchar"
      return: "float"
    - args:
      - "bigint"
      - "bigint"
      return: "bigint"
    - args:
      - "bigint"
      - "decimal"
      return: "decimal"
    - args:
      - "bigint"
      - "double"
      return: "double"
    - args:
      - "bigint"
      - "float"
      return: "float"
    - args:
      - "bigint"
      - "integer"
      return: "bigint"
    - args:
      - "bigint"
      - "boolean"
      return: "bigint"
    - args:
      - "bigint"
      - "varchar"
      return: "bigint"
    - args:
      - "integer"
      - "integer"
      return: "integer"
    - args:
      - "integer"
      - "decimal"
      return: "decimal"
    - args:
      - "integer"
      - "double"
      return: "double"
    - args:
      - "integer"
      - "float"
      return: "float"
    - args:
      - "integer"
      - "bigint"
      return: "bigint"
    - args:
      - "integer"
      - "boolean"
      return: "integer"
    - args:
      - "integer"
      - "varchar"
      return: "integer"
    - args:
      - "varchar"
      - "varchar"
      return: "varchar"
    - args:
      - "varchar"
      - "decimal"
      return: "decimal"
    - args:
      - "varchar"
      - "double"
      return: "double"
    - args:
      - "varchar"
      - "bigint"
      return: "bigint"
    - args:
      - "varchar"
      - "integer"
      return: "integer"
    - args:
      - "boolean"
      - "decimal"
      return: "decimal"
    - args:
      - "boolean"
      - "double"
      return: "double"
    - args:
      - "boolean"
      - "bigint"
      return: "bigint"
    - args:
      - "boolean"
      - "integer"
      return: "integer"
    - args:
      - "timestamp"
      - "timestamp"
      return: "timestamp"
  - names:
    - "/"
    signatures:
    - args:
      - "decimal"
      - "decimal"
      return: "decimal"
    - args:
      - "decimal"
      - "double"
      return: "double"
      rewrite: "CAST({0} / {1} AS FLOAT)"
    - args:
      - "decimal"
      - "float"
      return: "double"
      rewrite: "CAST({0} / {1} AS FLOAT)"
    - args:
      - "decimal"
      - "bigint"
      return: "decimal"
    - args:
      - "decimal"
      - "integer"
      return: "decimal"
    - args:
      - "decimal"
      - "boolean"
      return: "decimal"
    - args:
      - "decimal"
      - "varchar"
      return: "decimal"
    - args:
      - "double"
      - "double"
      return: "double"
      rewrite: "CAST({0} / {1} AS FLOAT)"
    - args:
      - "double"
      - "decimal"
      return: "double"
      rewrite: "CAST({0} / {1} AS FLOAT)"
    - args:
      - "double"
      - "float"
      return: "double"
      rewrite: "CAST({0} / {1} AS FLOAT)"
    - args:
      - "double"
      - "bigint"
      return: "double"
      rewrite: "CAST({0} / {1} AS FLOAT)"
    - args:
      - "double"
      - "integer"
      return: "double"
      rewrite: "CAST({0} / {1} AS FLOAT)"
    - args:
      - "double"
      - "boolean"
      return: "double"
      rewrite: "CAST({0} / {1} AS FLOAT)"
    - args:
      - "double"
      - "varchar"
      return: "double"
      rewrite: "CAST({0} / {1} AS FLOAT)"
    - args:
      - "float"
      - "double"
      return: "double"
      rewrite: "CAST({0} / {1} AS FLOAT)"
    - args:
      - "float"
      - "decimal"
      return: "double"
      rewrite: "CAST({0} / {1} AS FLOAT)"
    - args:
      - "float"
      - "float"
      return: "float"
      rewrite: "CAST({0} / {1} AS FLOAT)"
    - args:
      - "float"
      - "bigint"
      return: "double"
      rewrite: "CAST({0} / {1} AS FLOAT)"
    - args:
      - "float"
      - "integer"
      return: "float"
      rewrite: "CAST({0} / {1} AS FLOAT)"
    - args:
      - "float"
      - "boolean"
      return: "float"
      rewrite: "CAST({0} / {1} AS FLOAT)"
    - args:
      - "float"
      - "varchar"
      return: "float"
      rewrite: "CAST({0} / {1} AS FLOAT)"
    - args:
      - "bigint"
      - "bigint"
      return: "bigint"
    - args:
      - "bigint"
      - "decimal"
      return: "decimal"
    - args:
      - "bigint"
      - "double"
      return: "double"
      rewrite: "(CAST({0} AS DOUBLE PRECISION) / {1})"
    - args:
      - "bigint"
      - "float"
      return: "double"
      rewrite: "(CAST({0} AS DOUBLE PRECISION) / {1})"
    - args:
      - "bigint"
      - "integer"
      return: "bigint"
    - args:
      - "bigint"
      - "boolean"
      return: "bigint"
    - args:
      - "bigint"
      - "varchar"
      return: "bigint"
    - args:
      - "integer"
      - "integer"
      return: "integer"
    - args:
      - "integer"
      - "decimal"
      return: "decimal"
    - args:
      - "integer"
      - "double"
      return: "double"
      rewrite: "(CAST({0} AS DOUBLE PRECISION) / {1})"
    - args:
      - "integer"
      - "float"
      return: "float"
      rewrite: "(CAST({0} AS DOUBLE PRECISION) / {1})"
    - args:
      - "integer"
      - "bigint"
      return: "bigint"
    - args:
      - "integer"
      - "boolean"
      return: "integer"
    - args:
      - "integer"
      - "varchar"
      return: "integer"
    - args:
      - "varchar"
      - "decimal"
      return: "decimal"
    - args:
      - "varchar"
      - "double"
      return: "double"
      rewrite: "CAST({0} / {1} AS FLOAT)"
    - args:
      - "varchar"
      - "float"
      return: "float"
    - args:
      - "varchar"
      - "bigint"
      return: "bigint"
    - args:
      - "varchar"
      - "integer"
      return: "integer"
    - args:
      - "boolean"
      - "double"
      return: "double"
      rewrite: "(CAST({0} AS DOUBLE PRECISION) / {1})"
    - args:
      - "boolean"
      - "float"
      return: "float"
      rewrite: "(CAST({0} AS DOUBLE PRECISION) / {1})"
    - args:
      - "boolean"
      - "bigint"
      return: "bigint"
    - args:
      - "boolean"
      - "integer"
      return: "integer"
  - names:
    - "*"
    signatures:
    - args:
      - "decimal"
      - "decimal"
      return: "decimal"
    - args:
      - "decimal"
      - "double"
      return: "double"
    - args:
      - "decimal"
      - "float"
      return: "double"
    - args:
      - "decimal"
      - "bigint"
      return: "decimal"
    - args:
      - "decimal"
      - "integer"
      return: "decimal"
    - args:
      - "decimal"
      - "boolean"
      return: "decimal"
    - args:
      - "decimal"
      - "varchar"
      return: "decimal"
    - args:
      - "double"
      - "double"
      return: "double"
    - args:
      - "double"
      - "decimal"
      return: "double"
    - args:
      - "double"
      - "float"
      return: "double"
    - args:
      - "double"
      - "bigint"
      return: "double"
    - args:
      - "double"
      - "integer"
      return: "double"
    - args:
      - "double"
      - "boolean"
      return: "double"
    - args:
      - "double"
      - "varchar"
      return: "double"
    - args:
      - "float"
      - "double"
      return: "double"
    - args:
      - "float"
      - "decimal"
      return: "float"
    - args:
      - "float"
      - "float"
      return: "float"
    - args:
      - "float"
      - "bigint"
      return: "double"
    - args:
      - "float"
      - "integer"
      return: "float"
    - args:
      - "float"
      - "boolean"
      return: "float"
    - args:
      - "float"
      - "varchar"
      return: "float"
    - args:
      - "bigint"
      - "bigint"
      return: "bigint"
    - args:
      - "bigint"
      - "decimal"
      return: "decimal"
    - args:
      - "bigint"
      - "double"
      return: "double"
    - args:
      - "bigint"
      - "float"
      return: "double"
    - args:
      - "bigint"
      - "integer"
      return: "bigint"
    - args:
      - "bigint"
      - "boolean"
      return: "bigint"
    - args:
      - "bigint"
      - "varchar"
      return: "bigint"
    - args:
      - "integer"
      - "integer"
      return: "integer"
    - args:
      - "integer"
      - "decimal"
      return: "decimal"
    - args:
      - "integer"
      - "double"
      return: "double"
    - args:
      - "integer"
      - "float"
      return: "float"
    - args:
      - "integer"
      - "bigint"
      return: "bigint"
    - args:
      - "integer"
      - "boolean"
      return: "integer"
    - args:
      - "integer"
      - "varchar"
      return: "integer"
    - args:
      - "varchar"
      - "decimal"
      return: "decimal"
    - args:
      - "varchar"
      - "double"
      return: "double"
    - args:
      - "varchar"
      - "float"
      return: "float"
    - args:
      - "varchar"
      - "bigint"
      return: "bigint"
    - args:
      - "varchar"
      - "integer"
      return: "integer"
    - args:
      - "boolean"
      - "double"
      return: "double"
    - args:
      - "boolean"
      - "float"
      return: "float"
    - args:
      - "boolean"
      - "bigint"
      return: "bigint"
    - args:
      - "boolean"
      - "integer"
      return: "integer"
  - names:
    - "%"
    signatures:
    - args:
      - "bigint"
      - "varbinary"
      return: "bigint"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "boolean"
      - "integer"
      return: "integer"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "double"
      - "bigint"
      return: "double"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "double"
      - "double"
      return: "double"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "integer"
      - "varchar"
      return: "integer"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "double"
      - "boolean"
      return: "double"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "integer"
      - "double"
      return: "double"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "bigint"
      - "bigint"
      return: "bigint"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "integer"
      - "integer"
      return: "integer"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "bigint"
      - "integer"
      return: "bigint"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "varbinary"
      - "integer"
      return: "integer"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "integer"
      - "bigint"
      return: "bigint"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "integer"
      - "boolean"
      return: "integer"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "integer"
      - "varbinary"
      return: "integer"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "varchar"
      - "bigint"
      return: "bigint"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "boolean"
      - "double"
      return: "double"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "varbinary"
      - "bigint"
      return: "bigint"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "boolean"
      - "bigint"
      return: "bigint"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "bigint"
      - "double"
      return: "double"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "bigint"
      - "varchar"
      return: "bigint"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "varchar"
      - "integer"
      return: "integer"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "double"
      - "integer"
      return: "double"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
    - args:
      - "bigint"
      - "boolean"
      return: "bigint"
      rewrite: "CASE WHEN {1} = 0 THEN NULL ELSE ({0} % {1}) END "
  - names:
    - "is null"
    signatures:
    - args:
      - "float"
      return: "boolean"
    - args:
      - "integer"
      return: "boolean"
    - args:
      - "time"
      return: "boolean"
    - args:
      - "varbinary"
      return: "boolean"
    - args:
      - "timestamp"
      return: "boolean"
    - args:
      - "boolean"
      return: "boolean"
    - args:
      - "date"
      return: "boolean"
    - args:
      - "double"
      return: "boolean"
    - args:
      - "decimal"
      return: "boolean"
    - args:
      - "varchar"
      return: "boolean"
    - args:
      - "bigint"
      return: "boolean"
  - names:
    - "is not null"
    signatures:
    - args:
      - "float"
      return: "boolean"
    - args:
      - "integer"
      return: "boolean"
    - args:
      - "time"
      return: "boolean"
    - args:
      - "varbinary"
      return: "boolean"
    - args:
      - "timestamp"
      return: "boolean"
    - args:
      - "boolean"
      return: "boolean"
    - args:
      - "date"
      return: "boolean"
    - args:
      - "double"
      return: "boolean"
    - args:
      - "decimal"
      return: "boolean"
    - args:
      - "varchar"
      return: "boolean"
    - args:
      - "bigint"
      return: "boolean"
  - names:
    - "is distinct from"
    signatures:
    - args:
      - "boolean"
      - "boolean"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR ({0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "varbinary"
      - "varbinary"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR ({0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "date"
      - "date"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR ({0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "integer"
      - "integer"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR ({0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "bigint"
      - "bigint"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR ({0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "integer"
      - "bigint"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR ({0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "bigint"
      - "integer"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR ({0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "double"
      - "double"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR ({0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "double"
      - "integer"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR ({0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "integer"
      - "double"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR ({0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "bigint"
      - "double"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR ({0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "double"
      - "bigint"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR ({0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "time"
      - "time"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR ({0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "timestamp"
      - "timestamp"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR ({0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "varchar"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR ({0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "varchar"
      - "integer"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR (1 = ISNUMERIC({0}) AND {0} = CAST({1} AS BIGINT)) THEN 0 ELSE 1 END = 1 "
    - args:
      - "integer"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR (1 = ISNUMERIC({1}) AND CAST({0} AS BIGINT) = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "varchar"
      - "bigint"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR (1 = ISNUMERIC({0}) AND {0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "bigint"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR (1 = ISNUMERIC({1}) AND {0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "varchar"
      - "double"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR (1 = ISNUMERIC({0}) AND {0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "double"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR (1 = ISNUMERIC({1}) AND {0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "varchar"
      - "timestamp"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR (1 = ISDATE({0}) AND CAST({0} AS DATETIME2) = CAST({1} AS DATETIME2)) THEN 0 ELSE 1 END = 1 "
    - args:
      - "timestamp"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR (1 = ISDATE({1}) AND CAST({0} AS DATETIME2) = CAST({1} AS DATETIME2)) THEN 0 ELSE 1 END = 1 "
    - args:
      - "varchar"
      - "time"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR (1 = ISDATE({0}) AND CAST({0} AS DATETIME2) = CAST({1} AS DATETIME2)) THEN 0 ELSE 1 END = 1 "
    - args:
      - "time"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR (1 = ISDATE({1}) AND CAST({0} AS DATETIME2) = CAST({1} AS DATETIME2)) THEN 0 ELSE 1 END = 1 "
    - args:
      - "varchar"
      - "date"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR (1 = ISDATE({0}) AND CAST({0} AS DATETIME2) = CAST({1} AS DATETIME2)) THEN 0 ELSE 1 END = 1 "
    - args:
      - "date"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR (1 = ISDATE({1}) AND CAST({0} AS DATETIME2) = CAST({1} AS DATETIME2)) THEN 0 ELSE 1 END = 1 "
    - args:
      - "boolean"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR (({1} = ''0'' OR {1} = ''1'') AND CAST({0} AS BIGINT) = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "varchar"
      - "boolean"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR (({0} = ''0'' OR {0} = ''1'') AND {0} = CAST({1} AS BIGINT)) THEN 0 ELSE 1 END = 1 "
    - args:
      - "float"
      - "float"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR ({0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "float"
      - "integer"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR ({0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "integer"
      - "float"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR ({0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "float"
      - "bigint"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR ({0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "bigint"
      - "float"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR ({0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "float"
      - "double"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR ({0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "double"
      - "float"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR ({0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "float"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR (1 = ISNUMERIC({1}) AND {0} = {1}) THEN 0 ELSE 1 END = 1 "
    - args:
      - "varchar"
      - "float"
      return: "boolean"
      rewrite: "CASE WHEN ({0} IS NULL AND {1} IS NULL) OR (1 = ISNUMERIC({0}) AND {0} = {1}) THEN 0 ELSE 1 END = 1 "
  - names:
    - "is not distinct from"
    signatures:
    - args:
      - "boolean"
      - "boolean"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR ({0} = {1}))"
    - args:
      - "varbinary"
      - "varbinary"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR ({0} = {1}))"
    - args:
      - "date"
      - "date"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR ({0} = {1}))"
    - args:
      - "integer"
      - "integer"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR ({0} = {1}))"
    - args:
      - "bigint"
      - "bigint"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR ({0} = {1}))"
    - args:
      - "integer"
      - "bigint"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR ({0} = {1}))"
    - args:
      - "bigint"
      - "integer"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR ({0} = {1}))"
    - args:
      - "double"
      - "double"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR ({0} = {1}))"
    - args:
      - "double"
      - "integer"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR ({0} = {1}))"
    - args:
      - "integer"
      - "double"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR ({0} = {1}))"
    - args:
      - "bigint"
      - "double"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR ({0} = {1}))"
    - args:
      - "double"
      - "bigint"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR ({0} = {1}))"
    - args:
      - "time"
      - "time"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR ({0} = {1}))"
    - args:
      - "timestamp"
      - "timestamp"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR ({0} = {1}))"
    - args:
      - "varchar"
      - "varchar"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR ({0} = {1}))"
    - args:
      - "varchar"
      - "integer"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR (1 = ISNUMERIC({0}) AND {0} = CAST({1} AS BIGINT)))"
    - args:
      - "integer"
      - "varchar"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR (1 = ISNUMERIC({1}) AND CAST({0} AS BIGINT) = {1}))"
    - args:
      - "varchar"
      - "bigint"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR (1 = ISNUMERIC({0}) AND {0} = {1}))"
    - args:
      - "bigint"
      - "varchar"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR (1 = ISNUMERIC({1}) AND {0} = {1}))"
    - args:
      - "varchar"
      - "double"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR (1 = ISNUMERIC({0}) AND {0} = {1}))"
    - args:
      - "double"
      - "varchar"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR (1 = ISNUMERIC({1}) AND {0} = {1}))"
    - args:
      - "varchar"
      - "timestamp"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR (1 = ISDATE({0}) AND CAST({0} AS DATETIME2) = CAST({1} AS DATETIME2)))"
    - args:
      - "timestamp"
      - "varchar"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR (1 = ISDATE({1}) AND CAST({0} AS DATETIME2) = CAST({1} AS DATETIME2)))"
    - args:
      - "varchar"
      - "time"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR (1 = ISDATE({0}) AND CAST({0} AS DATETIME2) = CAST({1} AS DATETIME2)))"
    - args:
      - "time"
      - "varchar"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR (1 = ISDATE({1}) AND CAST({0} AS DATETIME2) = CAST({1} AS DATETIME2)))"
    - args:
      - "varchar"
      - "date"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR (1 = ISDATE({0}) AND CAST({0} AS DATETIME2) = CAST({1} AS DATETIME2)))"
    - args:
      - "date"
      - "varchar"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR (1 = ISDATE({1}) AND CAST({0} AS DATETIME2) = CAST({1} AS DATETIME2)))"
    - args:
      - "boolean"
      - "varchar"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR (({1} = ''0'' OR {1} = ''1'') AND CAST({0} AS BIGINT) = {1}))"
    - args:
      - "varchar"
      - "boolean"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR (({0} = ''0'' OR {0} = ''1'') AND {0} = CAST({1} AS BIGINT)))"
    - args:
      - "float"
      - "float"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR ({0} = {1}))"
    - args:
      - "float"
      - "integer"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR ({0} = {1}))"
    - args:
      - "integer"
      - "float"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR ({0} = {1}))"
    - args:
      - "float"
      - "bigint"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR ({0} = {1}))"
    - args:
      - "bigint"
      - "float"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR ({0} = {1}))"
    - args:
      - "float"
      - "double"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR ({0} = {1}))"
    - args:
      - "double"
      - "float"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR ({0} = {1}))"
    - args:
      - "float"
      - "varchar"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR (1 = ISNUMERIC({1}) AND {0} = {1}))"
    - args:
      - "varchar"
      - "float"
      return: "boolean"
      rewrite: "(({0} IS NULL AND {1} IS NULL) OR (1 = ISNUMERIC({0}) AND {0} = {1}))"
  - names:
    - "="
    - "!="
    - "<>"
    - ">"
    - ">="
    - "<"
    - "<="
    signatures:
    - args:
      - "decimal"
      - "decimal"
      return: "boolean"
    - args:
      - "decimal"
      - "double"
      return: "boolean"
    - args:
      - "decimal"
      - "float"
      return: "boolean"
    - args:
      - "decimal"
      - "bigint"
      return: "boolean"
    - args:
      - "decimal"
      - "integer"
      return: "boolean"
    - args:
      - "decimal"
      - "varchar"
      return: "boolean"
    - args:
      - "double"
      - "double"
      return: "boolean"
    - args:
      - "double"
      - "decimal"
      return: "boolean"
    - args:
      - "double"
      - "float"
      return: "boolean"
    - args:
      - "double"
      - "bigint"
      return: "boolean"
    - args:
      - "double"
      - "integer"
      return: "boolean"
    - args:
      - "double"
      - "varchar"
      return: "boolean"
    - args:
      - "float"
      - "float"
      return: "boolean"
    - args:
      - "float"
      - "decimal"
      return: "boolean"
    - args:
      - "float"
      - "double"
      return: "boolean"
    - args:
      - "float"
      - "bigint"
      return: "boolean"
    - args:
      - "float"
      - "integer"
      return: "boolean"
    - args:
      - "float"
      - "varchar"
      return: "boolean"
    - args:
      - "bigint"
      - "bigint"
      return: "boolean"
    - args:
      - "bigint"
      - "decimal"
      return: "boolean"
    - args:
      - "bigint"
      - "double"
      return: "boolean"
    - args:
      - "bigint"
      - "float"
      return: "boolean"
    - args:
      - "bigint"
      - "integer"
      return: "boolean"
    - args:
      - "bigint"
      - "varchar"
      return: "boolean"
    - args:
      - "integer"
      - "integer"
      return: "boolean"
    - args:
      - "integer"
      - "decimal"
      return: "boolean"
    - args:
      - "integer"
      - "double"
      return: "boolean"
    - args:
      - "integer"
      - "float"
      return: "boolean"
    - args:
      - "integer"
      - "bigint"
      return: "boolean"
    - args:
      - "integer"
      - "varchar"
      return: "boolean"
    - args:
      - "varchar"
      - "varchar"
      return: "boolean"
    - args:
      - "varchar"
      - "decimal"
      return: "boolean"
    - args:
      - "varchar"
      - "double"
      return: "boolean"
    - args:
      - "varchar"
      - "float"
      return: "boolean"
    - args:
      - "varchar"
      - "bigint"
      return: "boolean"
    - args:
      - "varchar"
      - "integer"
      return: "boolean"
    - args:
      - "date"
      - "date"
      return: "boolean"
    - args:
      - "date"
      - "timestamp"
      return: "boolean"
    - args:
      - "timestamp"
      - "date"
      return: "boolean"
    - args:
      - "timestamp"
      - "timestamp"
      return: "boolean"
    - args:
      - "time"
      - "time"
      return: "boolean"
    - args:
      - "time"
      - "timestamp"
      return: "boolean"
    - args:
      - "varbinary"
      - "varbinary"
      return: "boolean"
    - args:
      - "boolean"
      - "boolean"
      return: "boolean"
  - names:
    - "="
    signatures:
    - args:
      - "varchar"
      - "date"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({0}) = 1 THEN CAST({0} AS date) ELSE NULL END = {1} "
    - args:
      - "varchar"
      - "time"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({0}) = 1 THEN CAST({0} AS time) ELSE NULL END = {1} "
    - args:
      - "varchar"
      - "timestamp"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({0}) = 1 THEN CAST({0} AS datetime2) ELSE NULL END = {1} "
    - args:
      - "date"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({1}) = 1 THEN CAST({1} AS date) ELSE NULL END = {0} "
    - args:
      - "timestamp"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({1}) = 1 THEN CAST({1} AS datetime2) ELSE NULL END = {0} "
    - args:
      - "time"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({1}) = 1 THEN CAST({1} AS time) ELSE NULL END = {0} "
  - names:
    - ">"
    signatures:
    - args:
      - "varchar"
      - "date"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({0}) = 1 THEN CAST({0} AS date) ELSE NULL END > {1} "
    - args:
      - "varchar"
      - "time"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({0}) = 1 THEN CAST({0} AS time) ELSE NULL END > {1} "
    - args:
      - "varchar"
      - "timestamp"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({0}) = 1 THEN CAST({0} AS datetime2) ELSE NULL END > {1} "
    - args:
      - "date"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({1}) = 1 THEN CAST({1} AS date) ELSE NULL END < {0} "
    - args:
      - "timestamp"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({1}) = 1 THEN CAST({1} AS datetime2) ELSE NULL END < {0} "
    - args:
      - "time"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({1}) = 1 THEN CAST({1} AS time) ELSE NULL END < {0} "
  - names:
    - ">="
    signatures:
    - args:
      - "varchar"
      - "date"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({0}) = 1 THEN CAST({0} AS date) ELSE NULL END >= {1} "
    - args:
      - "varchar"
      - "time"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({0}) = 1 THEN CAST({0} AS time) ELSE NULL END >= {1} "
    - args:
      - "varchar"
      - "timestamp"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({0}) = 1 THEN CAST({0} AS datetime2) ELSE NULL END >= {1} "
    - args:
      - "date"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({1}) = 1 THEN CAST({1} AS date) ELSE NULL END <= {0} "
    - args:
      - "timestamp"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({1}) = 1 THEN CAST({1} AS datetime2) ELSE NULL END <= {0} "
    - args:
      - "time"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({1}) = 1 THEN CAST({1} AS time) ELSE NULL END <= {0} "
  - names:
    - "<"
    signatures:
    - args:
      - "varchar"
      - "date"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({0}) = 1 THEN CAST({0} AS date) ELSE NULL END < {1} "
    - args:
      - "varchar"
      - "time"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({0}) = 1 THEN CAST({0} AS time) ELSE NULL END < {1} "
    - args:
      - "varchar"
      - "timestamp"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({0}) = 1 THEN CAST({0} AS datetime2) ELSE NULL END < {1} "
    - args:
      - "date"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({1}) = 1 THEN CAST({1} AS date) ELSE NULL END > {0} "
    - args:
      - "timestamp"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({1}) = 1 THEN CAST({1} AS datetime2) ELSE NULL END > {0} "
    - args:
      - "time"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({1}) = 1 THEN CAST({1} AS time) ELSE NULL END > {0} "
  - names:
    - "<="
    signatures:
    - args:
      - "varchar"
      - "date"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({0}) = 1 THEN CAST({0} AS date) ELSE NULL END <= {1} "
    - args:
      - "varchar"
      - "time"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({0}) = 1 THEN CAST({0} AS time) ELSE NULL END <= {1} "
    - args:
      - "varchar"
      - "timestamp"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({0}) = 1 THEN CAST({0} AS datetime2) ELSE NULL END <= {1} "
    - args:
      - "date"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({1}) = 1 THEN CAST({1} AS date) ELSE NULL END >= {0} "
    - args:
      - "timestamp"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({1}) = 1 THEN CAST({1} AS datetime2) ELSE NULL END >= {0} "
    - args:
      - "time"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({1}) = 1 THEN CAST({1} AS time) ELSE NULL END >= {0} "
  - names:
    - "!="
    - "<>"
    signatures:
    - args:
      - "varchar"
      - "date"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({0}) = 1 THEN CAST({0} AS date) ELSE NULL END != {1} "
    - args:
      - "varchar"
      - "time"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({0}) = 1 THEN CAST({0} AS time) ELSE NULL END != {1} "
    - args:
      - "varchar"
      - "timestamp"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({0}) = 1 THEN CAST({0} AS datetime2) ELSE NULL END != {1} "
    - args:
      - "date"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({1}) = 1 THEN CAST({1} AS date) ELSE NULL END != {0} "
    - args:
      - "timestamp"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({1}) = 1 THEN CAST({1} AS datetime2) ELSE NULL END != {0} "
    - args:
      - "time"
      - "varchar"
      return: "boolean"
      rewrite: "CASE WHEN ISDATE({1}) = 1 THEN CAST({1} AS time) ELSE NULL END != {0} "
  - names:
    - "like"
    signatures:
    - args:
      - "double"
      - "timestamp"
      return: "boolean"
    - args:
      - "integer"
      - "timestamp"
      return: "boolean"
    - args:
      - "bigint"
      - "varchar"
      return: "boolean"
    - args:
      - "time"
      - "boolean"
      return: "boolean"
    - args:
      - "boolean"
      - "boolean"
      return: "boolean"
    - args:
      - "bigint"
      - "integer"
      return: "boolean"
    - args:
      - "timestamp"
      - "date"
      return: "boolean"
    - args:
      - "float"
      - "double"
      return: "boolean"
    - args:
      - "boolean"
      - "bigint"
      return: "boolean"
    - args:
      - "float"
      - "timestamp"
      return: "boolean"
    - args:
      - "bigint"
      - "time"
      return: "boolean"
    - args:
      - "varchar"
      - "boolean"
      return: "boolean"
    - args:
      - "double"
      - "varchar"
      return: "boolean"
    - args:
      - "integer"
      - "integer"
      return: "boolean"
    - args:
      - "varbinary"
      - "time"
      return: "boolean"
    - args:
      - "boolean"
      - "float"
      return: "boolean"
    - args:
      - "varbinary"
      - "varchar"
      return: "boolean"
    - args:
      - "varbinary"
      - "boolean"
      return: "boolean"
    - args:
      - "float"
      - "date"
      return: "boolean"
    - args:
      - "timestamp"
      - "varbinary"
      return: "boolean"
    - args:
      - "date"
      - "integer"
      return: "boolean"
    - args:
      - "float"
      - "varchar"
      return: "boolean"
    - args:
      - "timestamp"
      - "timestamp"
      return: "boolean"
    - args:
      - "time"
      - "varbinary"
      return: "boolean"
    - args:
      - "integer"
      - "date"
      return: "boolean"
    - args:
      - "boolean"
      - "varbinary"
      return: "boolean"
    - args:
      - "date"
      - "timestamp"
      return: "boolean"
    - args:
      - "time"
      - "date"
      return: "boolean"
    - args:
      - "float"
      - "integer"
      return: "boolean"
    - args:
      - "date"
      - "bigint"
      return: "boolean"
    - args:
      - "varbinary"
      - "float"
      return: "boolean"
    - args:
      - "varchar"
      - "date"
      return: "boolean"
    - args:
      - "integer"
      - "double"
      return: "boolean"
    - args:
      - "timestamp"
      - "float"
      return: "boolean"
    - args:
      - "double"
      - "varbinary"
      return: "boolean"
    - args:
      - "integer"
      - "varbinary"
      return: "boolean"
    - args:
      - "varchar"
      - "varbinary"
      return: "boolean"
    - args:
      - "bigint"
      - "timestamp"
      return: "boolean"
    - args:
      - "boolean"
      - "varchar"
      return: "boolean"
    - args:
      - "timestamp"
      - "varchar"
      return: "boolean"
    - args:
      - "double"
      - "time"
      return: "boolean"
    - args:
      - "bigint"
      - "boolean"
      return: "boolean"
    - args:
      - "varchar"
      - "bigint"
      return: "boolean"
    - args:
      - "timestamp"
      - "time"
      return: "boolean"
    - args:
      - "varchar"
      - "double"
      return: "boolean"
    - args:
      - "time"
      - "bigint"
      return: "boolean"
    - args:
      - "date"
      - "double"
      return: "boolean"
    - args:
      - "varbinary"
      - "integer"
      return: "boolean"
    - args:
      - "boolean"
      - "time"
      return: "boolean"
    - args:
      - "time"
      - "double"
      return: "boolean"
    - args:
      - "timestamp"
      - "boolean"
      return: "boolean"
    - args:
      - "varbinary"
      - "double"
      return: "boolean"
    - args:
      - "time"
      - "timestamp"
      return: "boolean"
    - args:
      - "date"
      - "date"
      return: "boolean"
    - args:
      - "integer"
      - "bigint"
      return: "boolean"
    - args:
      - "bigint"
      - "varbinary"
      return: "boolean"
    - args:
      - "integer"
      - "boolean"
      return: "boolean"
    - args:
      - "double"
      - "boolean"
      return: "boolean"
    - args:
      - "varchar"
      - "timestamp"
      return: "boolean"
    - args:
      - "float"
      - "boolean"
      return: "boolean"
    - args:
      - "double"
      - "float"
      return: "boolean"
    - args:
      - "time"
      - "integer"
      return: "boolean"
    - args:
      - "float"
      - "bigint"
      return: "boolean"
    - args:
      - "bigint"
      - "date"
      return: "boolean"
    - args:
      - "boolean"
      - "integer"
      return: "boolean"
    - args:
      - "bigint"
      - "bigint"
      return: "boolean"
    - args:
      - "varchar"
      - "integer"
      return: "boolean"
    - args:
      - "timestamp"
      - "integer"
      return: "boolean"
    - args:
      - "double"
      - "bigint"
      return: "boolean"
    - args:
      - "float"
      - "float"
      return: "boolean"
    - args:
      - "bigint"
      - "float"
      return: "boolean"
    - args:
      - "date"
      - "varbinary"
      return: "boolean"
    - args:
      - "boolean"
      - "timestamp"
      return: "boolean"
    - args:
      - "varbinary"
      - "date"
      return: "boolean"
    - args:
      - "double"
      - "date"
      return: "boolean"
    - args:
      - "float"
      - "time"
      return: "boolean"
    - args:
      - "timestamp"
      - "bigint"
      return: "boolean"
    - args:
      - "varbinary"
      - "bigint"
      return: "boolean"
    - args:
      - "float"
      - "varbinary"
      return: "boolean"
    - args:
      - "varbinary"
      - "timestamp"
      return: "boolean"
    - args:
      - "boolean"
      - "date"
      return: "boolean"
    - args:
      - "integer"
      - "time"
      return: "boolean"
    - args:
      - "varchar"
      - "time"
      return: "boolean"
    - args:
      - "bigint"
      - "double"
      return: "boolean"
    - args:
      - "double"
      - "double"
      return: "boolean"
    - args:
      - "integer"
      - "varchar"
      return: "boolean"
    - args:
      - "date"
      - "varchar"
      return: "boolean"
    - args:
      - "time"
      - "float"
      return: "boolean"
    - args:
      - "double"
      - "integer"
      return: "boolean"
    - args:
      - "integer"
      - "float"
      return: "boolean"
    - args:
      - "date"
      - "float"
      return: "boolean"
    - args:
      - "time"
      - "varchar"
      return: "boolean"
    - args:
      - "varbinary"
      - "varbinary"
      return: "boolean"
    - args:
      - "boolean"
      - "double"
      return: "boolean"
    - args:
      - "varchar"
      - "varchar"
      return: "boolean"
    - args:
      - "time"
      - "time"
      return: "boolean"
    - args:
      - "date"
      - "boolean"
      return: "boolean"
    - args:
      - "timestamp"
      - "double"
      return: "boolean"
    - args:
      - "varchar"
      - "float"
      return: "boolean"
    - args:
      - "date"
      - "time"
      return: "boolean"
  - names:
    - "abs"
    signatures:
    - args:
      - "decimal"
      return: "decimal"
    - args:
      - "integer"
      return: "integer"
    - args:
      - "double"
      return: "double"
    - args:
      - "bigint"
      return: "bigint"
    - args:
      - "float"
      return: "float"
  - names:
    - "acos"
    signatures:
    - args:
      - "decimal"
      return: "double"
    - args:
      - "bigint"
      return: "double"
    - args:
      - "double"
      return: "double"
    - args:
      - "float"
      return: "double"
    - args:
      - "integer"
      return: "double"
  - names:
    - "asin"
    signatures:
    - args:
      - "decimal"
      return: "double"
    - args:
      - "bigint"
      return: "double"
    - args:
      - "double"
      return: "double"
    - args:
      - "float"
      return: "double"
    - args:
      - "integer"
      return: "double"
  - names:
    - "e"
    signatures:
    - args: []
      return: "double"
  - names:
    - "atan"
    signatures:
    - args:
      - "decimal"
      return: "double"
    - args:
      - "bigint"
      return: "double"
    - args:
      - "double"
      return: "double"
    - args:
      - "float"
      return: "double"
    - args:
      - "integer"
      return: "double"
  - names:
    - "cos"
    signatures:
    - args:
      - "decimal"
      return: "double"
    - args:
      - "bigint"
      return: "double"
    - args:
      - "double"
      return: "double"
    - args:
      - "float"
      return: "double"
    - args:
      - "integer"
      return: "double"
  - names:
    - "cot"
    signatures:
    - args:
      - "decimal"
      return: "double"
      rewrite: "CAST(CASE WHEN {0} = 0 THEN NULL ELSE COT({0}) END AS FLOAT)"
    - args:
      - "bigint"
      return: "double"
      rewrite: "CAST(CASE WHEN {0} = 0 THEN NULL ELSE COT({0}) END AS FLOAT)"
    - args:
      - "double"
      return: "double"
      rewrite: "CAST(CASE WHEN {0} = 0 THEN NULL ELSE COT({0}) END AS FLOAT)"
    - args:
      - "float"
      return: "double"
      rewrite: "CAST(CASE WHEN {0} = 0 THEN NULL ELSE COT({0}) END AS FLOAT)"
    - args:
      - "integer"
      return: "double"
      rewrite: "CAST(CASE WHEN {0} = 0 THEN NULL ELSE COT({0}) END AS FLOAT)"
  - names:
    - "degrees"
    signatures:
    - args:
      - "decimal"
      return: "double"
      rewrite: "DEGREES(CAST({0} AS DOUBLE PRECISION))"
    - args:
      - "integer"
      return: "double"
      rewrite: "DEGREES(CAST({0} AS DOUBLE PRECISION))"
    - args:
      - "double"
      return: "double"
    - args:
      - "bigint"
      return: "double"
      rewrite: "DEGREES(CAST({0} AS DOUBLE PRECISION))"
    - args:
      - "float"
      return: "double"
      rewrite: "DEGREES(CAST({0} AS DOUBLE PRECISION))"
  - names:
    - "exp"
    signatures:
    - args:
      - "decimal"
      return: "double"
    - args:
      - "bigint"
      return: "double"
    - args:
      - "double"
      return: "double"
    - args:
      - "float"
      return: "double"
    - args:
      - "integer"
      return: "double"
  - names:
    - "ln"
    signatures:
    - args:
      - "decimal"
      return: "double"
      rewrite: "LOG({0})"
    - args:
      - "bigint"
      return: "double"
      rewrite: "LOG({0})"
    - args:
      - "double"
      return: "double"
      rewrite: "LOG({0})"
    - args:
      - "float"
      return: "double"
      rewrite: "LOG({0})"
    - args:
      - "integer"
      return: "double"
      rewrite: "LOG({0})"
  - names:
    - "floor"
    signatures:
    - args:
      - "decimal"
      return: "decimal"
    - args:
      - "integer"
      return: "integer"
    - args:
      - "double"
      return: "double"
    - args:
      - "bigint"
      return: "bigint"
    - args:
      - "float"
      return: "float"
  - names:
    - "log"
    signatures:
    - args:
      - "decimal"
      return: "double"
      rewrite: "LOG({0})"
    - args:
      - "double"
      return: "double"
      rewrite: "LOG({0})"
    - args:
      - "float"
      return: "double"
      rewrite: "LOG({0})"
    - args:
      - "bigint"
      return: "double"
      rewrite: "LOG({0})"
    - args:
      - "integer"
      return: "double"
      rewrite: "LOG({0})"
    - args:
      - "decimal"
      - "decimal"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "decimal"
      - "double"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "decimal"
      - "float"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "decimal"
      - "bigint"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "decimal"
      - "integer"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "double"
      - "decimal"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "double"
      - "double"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "double"
      - "float"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "double"
      - "bigint"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "double"
      - "integer"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "float"
      - "decimal"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "float"
      - "double"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "float"
      - "float"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "float"
      - "bigint"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "float"
      - "integer"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "bigint"
      - "decimal"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "bigint"
      - "double"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "bigint"
      - "float"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "bigint"
      - "bigint"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "bigint"
      - "integer"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "integer"
      - "decimal"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "integer"
      - "double"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "integer"
      - "float"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "integer"
      - "bigint"
      return: "double"
      rewrite: "LOG({0}, {1})"
    - args:
      - "integer"
      - "integer"
      return: "double"
      rewrite: "LOG({0}, {1})"
  - names:
    - "log10"
    signatures:
    - args:
      - "decimal"
      return: "double"
    - args:
      - "bigint"
      return: "double"
    - args:
      - "double"
      return: "double"
    - args:
      - "float"
      return: "double"
    - args:
      - "integer"
      return: "double"
  - names:
    - "power"
    - "pow"
    signatures:
    - args:
      - "decimal"
      - "decimal"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "decimal"
      - "double"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "decimal"
      - "float"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "decimal"
      - "bigint"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "decimal"
      - "integer"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "double"
      - "decimal"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "double"
      - "double"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "double"
      - "float"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "double"
      - "bigint"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "double"
      - "integer"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "float"
      - "decimal"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "float"
      - "double"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "float"
      - "float"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "float"
      - "bigint"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "float"
      - "integer"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "bigint"
      - "decimal"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "bigint"
      - "double"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "bigint"
      - "float"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "bigint"
      - "bigint"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "bigint"
      - "integer"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "integer"
      - "decimal"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "integer"
      - "double"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "integer"
      - "float"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "integer"
      - "bigint"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
    - args:
      - "integer"
      - "integer"
      return: "double"
      rewrite: "POWER(CAST({0} AS DOUBLE PRECISION), {1})"
  - names:
    - "radians"
    signatures:
    - args:
      - "integer"
      return: "double"
      rewrite: "RADIANS(CAST({0} AS DOUBLE PRECISION))"
    - args:
      - "decimal"
      return: "double"
      rewrite: "RADIANS(CAST({0} AS DOUBLE PRECISION))"
    - args:
      - "double"
      return: "double"
    - args:
      - "bigint"
      return: "double"
      rewrite: "RADIANS(CAST({0} AS DOUBLE PRECISION))"
    - args:
      - "float"
      return: "double"
  - names:
    - "rand"
    signatures:
    - args:
      - "bigint"
      return: "double"
    - args:
      - "double"
      return: "double"
    - args:
      - "float"
      return: "double"
    - args:
      - "integer"
      return: "double"
  - names:
    - "round"
    signatures:
    - args:
      - "decimal"
      - "decimal"
      return: "decimal"
    - args:
      - "decimal"
      - "double"
      return: "decimal"
    - args:
      - "decimal"
      - "float"
      return: "decimal"
    - args:
      - "decimal"
      - "bigint"
      return: "decimal"
    - args:
      - "decimal"
      - "integer"
      return: "decimal"
    - args:
      - "double"
      - "decimal"
      return: "double"
      # Convert doubles to varchar, then decimal to resolve inconsistent rounding behavior due to
      # floating point in accuracy. This accuracy happens if you cast float to decimal directly as well.
      rewrite: "ROUND(CAST(LTRIM(STR({0}, 50, 15)) AS DECIMAL(38,17)), {1})"
    - args:
      - "double"
      - "double"
      return: "double"
      # Convert doubles to varchar, then decimal to resolve inconsistent rounding behavior due to
      # floating point in accuracy. This accuracy happens if you cast float to decimal directly as well.
      rewrite: "ROUND(CAST(LTRIM(STR({0}, 50, 15)) AS DECIMAL(38,17)), {1})"
    - args:
      - "double"
      - "float"
      return: "double"
      # Convert doubles to varchar, then decimal to resolve inconsistent rounding behavior due to
      # floating point in accuracy. This accuracy happens if you cast float to decimal directly as well.
      rewrite: "ROUND(CAST(LTRIM(STR({0}, 50, 15)) AS DECIMAL(38,17)), {1})"
    - args:
      - "double"
      - "bigint"
      return: "double"
      # Convert doubles to varchar, then decimal to resolve inconsistent rounding behavior due to
      # floating point in accuracy. This accuracy happens if you cast float to decimal directly as well.
      rewrite: "ROUND(CAST(LTRIM(STR({0}, 50, 15)) AS DECIMAL(38,17)), {1})"
    - args:
      - "double"
      - "integer"
      return: "double"
      # Convert doubles to varchar, then decimal to resolve inconsistent rounding behavior due to
      # floating point in accuracy. This accuracy happens if you cast float to decimal directly as well.
      rewrite: "ROUND(CAST(LTRIM(STR({0}, 50, 15)) AS DECIMAL(38,17)), {1})"
    - args:
      - "float"
      - "decimal"
      return: "float"
      # Convert doubles to varchar, then decimal to resolve inconsistent rounding behavior due to
      # floating point in accuracy. This accuracy happens if you cast float to decimal directly as well.
      rewrite: "ROUND(CAST(LTRIM(STR({0}, 50, 15)) AS DECIMAL(38,17)), {1})"
    - args:
      - "float"
      - "double"
      return: "float"
      # Convert doubles to varchar, then decimal to resolve inconsistent rounding behavior due to
      # floating point in accuracy. This accuracy happens if you cast float to decimal directly as well.
      rewrite: "ROUND(CAST(LTRIM(STR({0}, 50, 15)) AS DECIMAL(38,17)), {1})"
    - args:
      - "float"
      - "float"
      return: "float"
      # Convert doubles to varchar, then decimal to resolve inconsistent rounding behavior due to
      # floating point in accuracy. This accuracy happens if you cast float to decimal directly as well.
      rewrite: "ROUND(CAST(LTRIM(STR({0}, 50, 15)) AS DECIMAL(38,17)), {1})"
    - args:
      - "float"
      - "bigint"
      return: "float"
      # Convert doubles to varchar, then decimal to resolve inconsistent rounding behavior due to
      # floating point in accuracy. This accuracy happens if you cast float to decimal directly as well.
      rewrite: "ROUND(CAST(LTRIM(STR({0}, 50, 15)) AS DECIMAL(38,17)), {1})"
    - args:
      - "float"
      - "integer"
      return: "float"
      # Convert doubles to varchar, then decimal to resolve inconsistent rounding behavior due to
      # floating point in accuracy. This accuracy happens if you cast float to decimal directly as well.
      rewrite: "ROUND(CAST(LTRIM(STR({0}, 50, 15)) AS DECIMAL(38,17)), {1})"
    - args:
      - "bigint"
      - "decimal"
      return: "bigint"
    - args:
      - "bigint"
      - "double"
      return: "bigint"
    - args:
      - "bigint"
      - "float"
      return: "bigint"
    - args:
      - "bigint"
      - "bigint"
      return: "bigint"
    - args:
      - "bigint"
      - "integer"
      return: "bigint"
    - args:
      - "integer"
      - "decimal"
      return: "integer"
    - args:
      - "integer"
      - "double"
      return: "integer"
    - args:
      - "integer"
      - "float"
      return: "integer"
    - args:
      - "integer"
      - "bigint"
      return: "integer"
    - args:
      - "integer"
      - "integer"
      return: "integer"
    - args:
      - "decimal"
      return: "decimal"
      rewrite: "ROUND({0}, 0)"
    - args:
      - "double"
      return: "double"
      # Convert doubles to varchar, then decimal to resolve inconsistent rounding behavior due to
      # floating point in accuracy. This accuracy happens if you cast float to decimal directly as well.
      rewrite: "ROUND(CAST(LTRIM(STR({0}, 50, 15)) AS DECIMAL(38,17)), 0)"
    - args:
      - "float"
      return: "float"
      # Convert doubles to varchar, then decimal to resolve inconsistent rounding behavior due to
      # floating point in accuracy. This accuracy happens if you cast float to decimal directly as well.
      rewrite: "ROUND(CAST(LTRIM(STR({0}, 50, 15)) AS DECIMAL(38,17)), 0)"
    - args:
      - "bigint"
      return: "bigint"
      rewrite: "ROUND({0}, 0)"
    - args:
      - "integer"
      return: "integer"
      rewrite: "ROUND({0}, 0)"
  - names:
    - "sign"
    signatures:
    - args:
      - "decimal"
      return: "decimal"
    - args:
      - "integer"
      return: "integer"
    - args:
      - "double"
      return: "double"
    - args:
      - "bigint"
      return: "bigint"
    - args:
      - "float"
      return: "float"
  - names:
    - "sin"
    signatures:
    - args:
      - "decimal"
      return: "double"
    - args:
      - "bigint"
      return: "double"
    - args:
      - "double"
      return: "double"
    - args:
      - "float"
      return: "double"
    - args:
      - "integer"
      return: "double"
  - names:
    - "sqrt"
    signatures:
    - args:
      - "decimal"
      return: "double"
      rewrite: "SQRT(CAST({0} AS DOUBLE PRECISION))"
    - args:
      - "bigint"
      return: "double"
      rewrite: "SQRT(CAST({0} AS DOUBLE PRECISION))"
    - args:
      - "double"
      return: "double"
    - args:
      - "float"
      return: "double"
      rewrite: "SQRT(CAST({0} AS DOUBLE PRECISION))"
    - args:
      - "integer"
      return: "double"
      rewrite: "SQRT(CAST({0} AS DOUBLE PRECISION))"
  - names:
    - "tan"
    signatures:
    - args:
      - "decimal"
      return: "double"
    - args:
      - "bigint"
      return: "double"
    - args:
      - "double"
      return: "double"
    - args:
      - "float"
      return: "double"
    - args:
      - "integer"
      return: "double"
  - names:
    - "lower"
    signatures:
    - args:
      - "varchar"
      return: "varchar"
  - names:
    - "char_length"
    signatures:
    - args:
      - "varchar"
      return: "integer"
      # SQL Server LEN trims strings, so ensure we count spaces.
      rewrite: "LEN(REPLACE({0}, '' '', ''_''))"
  - names:
    - "character_length"
    signatures:
    - args:
      - "varchar"
      return: "integer"
      # SQL Server LEN trims strings, so ensure we count spaces.
      rewrite: "LEN(REPLACE({0}, '' '', ''_''))"
  - names:
    - "replace"
    signatures:
    - args:
      - "varchar"
      - "varchar"
      - "varchar"
      return: "varchar"
  - names:
    - "substring"
    signatures:
    - args:
      - "varchar"
      - "bigint"
      - "double"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, {2})"
    - args:
      - "varchar"
      - "integer"
      - "bigint"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, {2})"
    - args:
      - "varchar"
      - "integer"
      - "integer"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, {2})"
    - args:
      - "varchar"
      - "double"
      - "integer"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, {2})"
    - args:
      - "varchar"
      - "double"
      - "bigint"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, {2})"
    - args:
      - "varchar"
      - "integer"
      - "double"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, {2})"
    - args:
      - "varchar"
      - "double"
      - "double"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, {2})"
    - args:
      - "varchar"
      - "bigint"
      - "integer"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, {2})"
    - args:
      - "varchar"
      - "bigint"
      - "bigint"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, {2})"
  - names:
    - "substr"
    signatures:
    - args:
      - "varchar"
      - "bigint"
      - "double"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, {2})"
    - args:
      - "varchar"
      - "integer"
      - "bigint"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, {2})"
    - args:
      - "varchar"
      - "integer"
      - "integer"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, {2})"
    - args:
      - "varchar"
      - "double"
      - "integer"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, {2})"
    - args:
      - "varchar"
      - "double"
      - "bigint"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, {2})"
    - args:
      - "varchar"
      - "integer"
      - "double"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, {2})"
    - args:
      - "varchar"
      - "double"
      - "double"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, {2})"
    - args:
      - "varchar"
      - "bigint"
      - "integer"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, {2})"
    - args:
      - "varchar"
      - "bigint"
      - "bigint"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, {2})"
    - args:
      - "varchar"
      - "bigint"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, 9223372036854775807)"
    - args:
      - "varchar"
      - "integer"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, 9223372036854775807)"
    - args:
      - "varchar"
      - "double"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, 9223372036854775807)"
    - args:
      - "varchar"
      - "float"
      return: "varchar"
      rewrite: "SUBSTRING({0}, {1}, 9223372036854775807)"
  - names:
    - "trim"
    signatures:
    - args:
      - "varchar"
      return: "varchar"
  - names:
    - "left"
    signatures:
    - args:
      - "varchar"
      - "integer"
      return: "varchar"
  - names:
    - "right"
    signatures:
    - args:
      - "varchar"
      - "integer"
      return: "varchar"
  - names:
    - "ltrim"
    signatures:
    - args:
      - "varchar"
      return: "varchar"
  - names:
    - "rtrim"
    signatures:
    - args:
      - "varchar"
      return: "varchar"
  - names:
    - "upper"
    signatures:
    - args:
      - "varchar"
      return: "varchar"
  - names:
    - "year"
    signatures:
    - args:
      - "timestamp"
      return: "integer"
    - args:
      - "date"
      return: "integer"
    - args:
      - "time"
      return: "integer"
  - names:
    - "month"
    signatures:
    - args:
      - "timestamp"
      return: "integer"
    - args:
      - "date"
      return: "integer"
    - args:
      - "time"
      return: "integer"

  variable_length_operators:
    - names:
        - concat
      variable_signatures:
        - return: varchar
          arg_type: varchar
          variable_rewrite:
            separator_sequence:
              - ', '
            rewrite_format: 'CONCAT({separator[0]})'
    - names:
        - and
      variable_signatures:
        - return: boolean
          arg_type: boolean
    - names:
        - or
      variable_signatures:
        - return: boolean
          arg_type: boolean
  window_functions: []
